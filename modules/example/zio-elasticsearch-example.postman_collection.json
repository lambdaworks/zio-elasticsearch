{
	"info": {
		"_postman_id": "1b9620b5-f3c7-4ad7-a2dc-e3d14d73dc57",
		"name": "zio-elasticsearch-example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "es",
			"item": [
				{
					"name": "Create \"repositories\" index",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 1\n    }\n  },\n  \"mappings\": {\n    \"_routing\": {\n      \"required\": true\n    },\n    \"properties\": {\n      \"id\": {\n        \"type\": \"keyword\"\n      },\n      \"organization\": {\n        \"type\": \"keyword\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"url\": {\n        \"type\": \"keyword\"\n      },\n      \"description\": {\n        \"type\": \"text\"\n      },\n      \"lastCommitAt\": {\n        \"type\": \"date\"\n      },\n      \"stars\": {\n        \"type\": \"integer\"\n      },\n      \"forks\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{ELASTICSEARCH_HOST}}:{{ELASTICSEARCH_PORT}}/repositories",
							"protocol": "http",
							"host": [
								"{{ELASTICSEARCH_HOST}}"
							],
							"port": "{{ELASTICSEARCH_PORT}}",
							"path": [
								"repositories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete \"repositories\" index",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{ELASTICSEARCH_HOST}}:{{ELASTICSEARCH_PORT}}/repositories",
							"protocol": "http",
							"host": [
								"{{ELASTICSEARCH_HOST}}"
							],
							"port": "{{ELASTICSEARCH_PORT}}",
							"path": [
								"repositories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checking app health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/health",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating a repository (scurl-detector)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"1234567\",\n    \"organization\": \"lambdaworks\",\n    \"name\": \"scrul-detector\",\n    \"url\": \"https://github.com/lambdaworks/scurl-detector\",\n    \"description\": \"Scala library that detects and extracts URLs from text.\",\n    \"lastCommitAt\": \"2022-12-01T14:27:11.436\",\n    \"stars\": 14,\n    \"forks\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating a repository with invalid body",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"organization\": \"lambdaworks\",\n    \"name\": \"We build awesome digital products\",\n    \"url\": \"https://lambdaworks.io\",\n    \"lastCommitAt\": \"No commit date!\",\n    \"stars\": 9999\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating a repository (scountries)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"12345679\",\n    \"organization\": \"lambdaworks\",\n    \"name\": \"scountries\",\n    \"url\": \"https://github.com/lambdaworks/scountries\",\n    \"description\": \"Scala library that provides an enumeration of ISO 3166 codes for countries, along with their subdivisions.\",\n    \"lastCommitAt\": \"2022-12-08T19:10:46.016\",\n    \"stars\": 16,\n    \"forks\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieving all repositories",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieving an existing repository",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/lambdaworks/1234567",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"lambdaworks",
						"1234567"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieving a non-existing repository (wrong ID)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/lambdaworks/lw-scurl-detector",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"lambdaworks",
						"lw-scurl-detector"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieving a non-existing repository (wrong organization)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/zio/lw-zio-elasticsearch",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"zio",
						"lw-zio-elasticsearch"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deleting an existing repository",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/lambdaworks/1234567",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"lambdaworks",
						"1234567"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deleting a non-existing repository",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/lambdaworks/lw-scurl-detector",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"lambdaworks",
						"lw-scurl-detector"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating/updating a repository",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"1234567\",\n    \"organization\": \"lambdaworks\",\n    \"name\": \"zio-elasticsearch\",\n    \"url\": \"https://github.com/lambdaworks/zio-elasticsearch\",\n    \"description\": \"ZIO Elasticsearch is a type-safe, testable and streaming-friendly ZIO native Elasticsearch client.\",\n    \"lastCommitAt\": \"2022-12-27T15:58:30.996\",\n    \"stars\": 21,\n    \"forks\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/1234567",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"1234567"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating/updating a repository (wrong IDs)",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"zio-elasticsearch\",\n    \"organization\": \"lambdaworks\",\n    \"name\": \"zio-elasticsearch\",\n    \"url\": \"https://github.com/lambdaworks/zio-elasticsearch\",\n    \"description\": \"ZIO Elasticsearch is a type-safe, testable and streaming-friendly ZIO native Elasticsearch client.\",\n    \"lastCommitAt\": \"2022-12-27T15:58:30.996\",\n    \"stars\": 21,\n    \"forks\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/lw-zio-elasticsearch",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"lw-zio-elasticsearch"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updating a repository with invalid body",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"organization\": \"lambdaworks\",\n    \"url\": \"https://github.com/lambdaworks/zio-elasticsearch\",\n    \"lastCommitAt\": \"2022-12-27T15:58:30.996\",\n    \"stars\": 21,\n    \"forks\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/lw-zio-elasticsearch",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"lw-zio-elasticsearch"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for repositories with 4 forks and with latest commit after 2019-12-04",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"CompoundCriteria\": {\n        \"operator\": \"And\",\n        \"filters\": [\n            {\n                \"IntCriteria\": {\n                    \"field\": \"Forks\",\n                    \"operator\": \"EqualTo\",\n                    \"value\": 4\n                }\n            },\n            {\n                \"DateCriteria\": {\n                    \"field\": \"LastCommitAt\",\n                    \"operator\": \"GreaterThan\",\n                    \"value\": \"2019-12-04T18:38:04\"\n                }\n            }\n        ]\n    }\n}\n"
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/search",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for documents in which name starts with term1 and contains term2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"CompoundCriteria\": {\n        \"operator\": \"And\",\n        \"filters\": [\n            {\n                \"StringCriteria\": {\n                    \"field\": \"Name\",\n                    \"operator\": \"StartsWith\",\n                    \"value\": \"scrul\"\n                }\n            },\n            {\n                \"StringCriteria\": {\n                    \"field\": \"Name\",\n                    \"operator\": \"Contains\",\n                    \"value\": \"detector\"\n                }\n            }\n        ]\n    }\n}"
				},
				"url": {
					"raw": "http://localhost:{{HTTP_PORT}}/api/repositories/search",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{HTTP_PORT}}",
					"path": [
						"api",
						"repositories",
						"search"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ELASTICSEARCH_HOST",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "ELASTICSEARCH_PORT",
			"value": "9200",
			"type": "string"
		},
		{
			"key": "HTTP_PORT",
			"value": "9000",
			"type": "string"
		}
	]
}