"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1775],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:a,i[1]=u;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2781:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={id:"elastic_request_count",title:"Count Request"},i=void 0,u={unversionedId:"overview/requests/elastic_request_count",id:"overview/requests/elastic_request_count",title:"Count Request",description:"The Count request is used for getting the number of matches for a search query. If no query is specified, matchAll query will be used to count all the documents.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_count.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_count",permalink:"/zio-elasticsearch/overview/requests/elastic_request_count",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_count.md",tags:[],version:"current",frontMatter:{id:"elastic_request_count",title:"Count Request"},sidebar:"docs",previous:{title:"Bulk Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_bulk"},next:{title:"Create Request, CreateWithId Request and CreateOrUpdate Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_create"}},s={},c=[],l={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," request is used for getting the number of matches for a search query. If no query is specified, ",(0,a.kt)("inlineCode",{parentName:"p"},"matchAll")," query will be used to count all the documents."),(0,a.kt)("p",null,"In order to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," request import the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest.CountRequest\nimport zio.elasticsearch.ElasticRequest.count\n")),(0,a.kt)("p",null,"You can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," request using the ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," method without specifying query this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `IndexName`\nimport zio.elasticsearch._\n\nval request: CountRequest = count(index = IndexName("index"))\n')),(0,a.kt)("p",null,"You can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," request using the ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," method with specified query this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticQuery._\n\nval request: CountRequest = count(index = IndexName("index"), query = contains(field = Document.name, value = "test"))\n')),(0,a.kt)("p",null,"If you want to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"routing"),", you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"routing")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval requestWithRouting: CountRequest = count(index = Index("index")).routing(Routing("routing"))\n')),(0,a.kt)("p",null,"You can find more information about ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," request ",(0,a.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-count.html"},"here"),"."))}m.isMDXComponent=!0}}]);