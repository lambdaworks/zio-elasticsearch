"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1678],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),g=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=g(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=g(a),d=r,u=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return a?n.createElement(u,s(s({ref:t},l),{},{components:a})):n.createElement(u,s({ref:t},l))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var g=2;g<i;g++)s[g]=a[g];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5057:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var n=a(7462),r=(a(7294),a(3905));const i={id:"elastic_aggregation",title:"Overview"},s=void 0,o={unversionedId:"overview/elastic_aggregation",id:"overview/elastic_aggregation",title:"Overview",description:"In order to execute Elasticsearch aggregation requests, you first must specify the type of the aggregation along with the corresponding parameters for that type.",source:"@site/../modules/docs/target/mdoc/overview/elastic_aggregation.md",sourceDirName:"overview",slug:"/overview/elastic_aggregation",permalink:"/zio-elasticsearch/overview/elastic_aggregation",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/elastic_aggregation.md",tags:[],version:"current",frontMatter:{id:"elastic_aggregation",title:"Overview"},sidebar:"docs",previous:{title:"Wildcard Query",permalink:"/zio-elasticsearch/overview/queries/elastic_query_wildcard"},next:{title:"Bucket Selector Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_bucket_selector"}},c={},g=[],l={toc:g},m="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In order to execute Elasticsearch aggregation requests, you first must specify the type of the aggregation along with the corresponding parameters for that type.\nAggregations are described with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticAggregation")," data type, which can be constructed from the DSL methods found under the following import:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticAggregation._\n")),(0,r.kt)("p",null,"Aggregation DSL methods that require a field solely accept field types that are defined as Elasticsearch primitives.\nYou can pass field names simply as strings, or you can use the type-safe aggregation methods that make use of ZIO Schema's accessors.\nAn example with a ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," aggregation is shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticAggregation._\n\nfinal case class User(id: Int, name: String, age: Int)\n\nobject User {\n  implicit val schema: Schema.CaseClass3[Int, String, Int, User] =\n    DeriveSchema.gen[User]\n\n  val (id, name, age) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nmaxAggregation(name = "maxAggregation", field = "age")\n\n// type-safe method\nmaxAggregation(name = "maxAggregation", field = User.age)\n')),(0,r.kt)("p",null,"You can also represent a field from nested structures with type-safe aggregation methods, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," operator on accessors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticAggregation._\nimport zio.schema.annotation.fieldName\nimport zio.schema.{DeriveSchema, Schema}\n\nfinal case class Name(\n  @fieldName("first_name")\n  firstName: String,\n  @fieldName("last_name")\n  lastName: String\n)\n\nobject Name {\n  implicit val schema: Schema.CaseClass2[String, String, Name] = DeriveSchema.gen[Name]\n\n  val (firstName, lastName) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nfinal case class User(id: String, name: Name, email: String, age: Int)\n\nobject User {\n  implicit val schema: Schema.CaseClass4[String, Name, String, Int, User] = \n    DeriveSchema.gen[User]\n\n  val (id, name, email, age) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\ntermsAggregation(name = "termsAggregation", field = "name.first_name")\n\n// type-safe method\ntermsAggregation(name = "termsAggregation", field = User.name / Name.firstName)\n')),(0,r.kt)("p",null,"Accessors also have a ",(0,r.kt)("inlineCode",{parentName:"p"},"suffix")," method, in case you want to use one in aggregations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'ElasticAggregation.cardinality(name = "cardinalityAggregation", field = "email.keyword")\n\n// type-safe method\nElasticAggregation.cardinality(name = "cardinalityAggregation", field = User.email.suffix("keyword"))\n')),(0,r.kt)("p",null,"In case the suffix is ",(0,r.kt)("inlineCode",{parentName:"p"},'"keyword"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"raw"')," you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"keyword")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"raw")," methods respectively."),(0,r.kt)("p",null,"Now, after describing an aggregation, you can pass it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregate"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"search")," method to obtain the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticRequest")," corresponding to that aggregation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticAggregation._\nimport zio.elasticsearch.ElasticQuery._\n\nElasticRequest.aggregate(index = IndexName("index"), aggregation = termsAggregation(name = "termsAggregation", field = "name.first_name.keyword"))\nElasticRequest.search(IndexName("index"), query = matchAll, aggregation = termsAggregation(name = "termsAggregation", field = "name.first_name.keyword"))\n\n// type-safe methods\nElasticRequest.aggregate(index = IndexName("index"), aggregation = termsAggregation(name = "termsAggregation", field = User.name / Name.firstName.keyword))\nElasticRequest.search(index = IndexName("index"), query = matchAll, aggregation = termsAggregation(name = "termsAggregation", field = User.name / Name.firstName.keyword))\n\n')))}p.isMDXComponent=!0}}]);