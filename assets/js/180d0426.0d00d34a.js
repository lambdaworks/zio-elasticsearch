"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2172],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(a),h=r,m=g["".concat(o,".").concat(h)]||g[h]||d[h]||i;return a?n.createElement(m,s(s({ref:t},u),{},{components:a})):n.createElement(m,s({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[g]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5536:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={id:"elastic_request_search",title:"Search Request"},s=void 0,l={unversionedId:"overview/requests/elastic_request_search",id:"overview/requests/elastic_request_search",title:"Search Request",description:"The Search request allows you to execute a search query (and aggregation) and get back search hits that match the query.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_search.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_search",permalink:"/zio-elasticsearch/overview/requests/elastic_request_search",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_search.md",tags:[],version:"current",frontMatter:{id:"elastic_request_search",title:"Search Request"},sidebar:"docs",previous:{title:"Get By ID Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_get_by_id"},next:{title:"Update Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update"}},o={},c=[],u={toc:c},g="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(g,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Search")," request allows you to execute a search query (and aggregation) and get back search hits that match the query."),(0,r.kt)("p",null,"There are two ways of executing a search query: "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"By using ",(0,r.kt)("inlineCode",{parentName:"li"},"Search")," request"),(0,r.kt)("li",{parentName:"ol"},"By using ",(0,r.kt)("inlineCode",{parentName:"li"},"SearchAndAggregate")," request")),(0,r.kt)("p",null,"To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Search")," request do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticRequest.SearchRequest\nimport zio.elasticsearch.ElasticRequest.search\n// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\n\nval request: SearchRequest = search(index = IndexName("index"), query = matchAll)\n')),(0,r.kt)("p",null,"To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"SearchAndAggregate")," request do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticRequest.SearchAndAggregateRequest\nimport zio.elasticsearch.ElasticRequest.search\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\nimport zio.elasticsearch.ElasticAggregation._\n\nval request: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField"))\n')),(0,r.kt)("p",null,"If you want to add aggregation to ",(0,r.kt)("inlineCode",{parentName:"p"},"SearchRequest"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregate")," method on it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticAggregation._\n\nval requestWithAggregation: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll).aggregate(aggregation = maxAggregation(name = "aggregation", field = "intField"))\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"excludes"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"excludes")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val request1WithExcludes: SearchRequest = search(index = IndexName("index"), query = matchAll).excludes("longField")\nval request2WithExcludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).excludes("longField", "intField")\n// type-safe fields:\nval request1TsWithExcludes: SearchRequest = search(index = IndexName("index"), query = matchAll).excludes(Document.longField)\nval request2TsWithExcludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).excludes(Document.longField, Document.intField)\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"from"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val request1WithFrom: SearchRequest = search(index = IndexName("index"), query = matchAll).from(2)\nval request2WithFrom: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).from(2)\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlight"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlights")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticHighlight.highlight\n\nval request1WithHighlights: SearchRequest = search(index = IndexName("index"), query = matchAll).highlights("intField")\nval request2WithHighlights: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).highlights(Document.intField)\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"includes"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"includes")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val request1WithIncludes: SearchRequest = search(index = IndexName("index"), query = matchAll).includes("longField")\nval request2WithIncludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes("longField", "intField")\n// type-safe fields:\nval request1TsWithIncludes: SearchRequest = search(index = IndexName("index"), query = matchAll).includes(Document.longField)\nval request2TsWithIncludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes(Document.longField, Document.intField)\n// with schema\nval request1WithIncludesSchema: SearchRequest = search(index = IndexName("index"), query = matchAll).includes[Document]\nval request2WithIncludesSchema: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes[Document]\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"routing"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"routing")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval request1WithRouting: SearchRequest = search(index = IndexName("index"), query = matchAll).routing(Routing("routing"))\nval request2WithRouting: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).routing(Routing("routing"))\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"search_after"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"searchAfter")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.json.ast.Json.{Arr, Str}\n\nval request1WithSearchAfter: SearchRequest = search(index = IndexName("index"), query = matchAll).searchAfter(Arr(Str("12345")))\nval request2WithSearchAfter: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).searchAfter(Arr(Str("12345")))\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"size"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val request1WithSize: SearchRequest = search(index = IndexName("index"), query = matchAll).size(5)\nval request2WithSize: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).size(5)\n')),(0,r.kt)("p",null,"If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"sort"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," method on both requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticSort.sortBy\nimport zio.elasticsearch.query.sort.SortOrder.Asc\nimport zio.elasticsearch.query.sort.Missing.First\n\nval request1WithSort: SearchRequest = search(index = IndexName("index"), query = matchAll).sort(sortBy(Document.intField).order(Asc))\nval request2WithSort: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).sort(sortBy("intField").missing(First))\n')),(0,r.kt)("p",null,"You can find more information about ",(0,r.kt)("inlineCode",{parentName:"p"},"Search")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SearchAndAggregate")," requests ",(0,r.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-search.html"},"here"),"."))}d.isMDXComponent=!0}}]);