"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[503],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return r?n.createElement(f,o(o({ref:t},m),{},{components:r})):n.createElement(f,o({ref:t},m))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1462:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={id:"overview_streaming",title:"Streaming"},o=void 0,s={unversionedId:"overview/overview_streaming",id:"overview/overview_streaming",title:"Streaming",description:"ZIO Elasticsearch offers a few different API methods for creating ZIO streams out of search requests.",source:"@site/../modules/docs/target/mdoc/overview/streaming.md",sourceDirName:"overview",slug:"/overview/overview_streaming",permalink:"/zio-elasticsearch/overview/overview_streaming",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/streaming.md",tags:[],version:"current",frontMatter:{id:"overview_streaming",title:"Streaming"},sidebar:"docs",previous:{title:"Bulkable",permalink:"/zio-elasticsearch/overview/overview_bulkable"}},l={},c=[],m={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"ZIO Elasticsearch offers a few different API methods for creating ZIO streams out of search requests.\nThe library offers two different streaming modes relying on two different ways of retrieving paged results from Elasticsearch: ",(0,a.kt)("inlineCode",{parentName:"p"},"scroll")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"search_after"),".\nWhen using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Elasticsearch.stream(...)")," method you can provide your own configuration by creating the ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig")," object and providing\nit as a parameter for the method next to ",(0,a.kt)("inlineCode",{parentName:"p"},"SearchRequest"),". If you choose not to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig")," then ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig.Default")," will be used."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig.Default")," uses Scroll API by default (which is recommended for queries that have under 10,000 results), has keep_alive parameter set for ",(0,a.kt)("inlineCode",{parentName:"p"},"1m")," and\nuses Elasticsearch default page size."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig")," also makes use of our fluent API, so you can use methods ",(0,a.kt)("inlineCode",{parentName:"p"},"withPageSize")," (used to determine how many documents to return per page)\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"keepAliveFor")," (used to tell Elasticsearch how long should search be kept alive after every pagination using ",(0,a.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/8.6/api-conventions.html#time-units"},"Time units"),").\n",(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig")," has two predefined values for ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig.Scroll")," that uses ElasticSearch Scroll API and ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamConfig.SearchAfter")," that uses Search After API with Point In Time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'StreamConfig(searchAfter = false, keepAlive = "5m", pageSize = Some(100))\n')),(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"streamAs[A]")," method, results are parsed into the desired type ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", relying on an implicit schema for ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'final case class User(id: Int, name: String)\n\nobject User {\n  implicit val schema: Schema.CaseClass2[Int, String, User] =\n    DeriveSchema.gen[User]\n\n  val (id, name) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nval request: SearchRequest =\n  ElasticRequest.search(IndexName("index"), ElasticQuery.range(User.id).gte(5))\n\nval searchAfterStream: ZStream[Elasticsearch, Throwable, User] =\n  Elasticsearch.streamAs[User](request, StreamConfig.SearchAfter)\n')),(0,a.kt)("p",null,"Besides the type-safe ",(0,a.kt)("inlineCode",{parentName:"p"},"streamAs[A]")," method, the library offers a basic ",(0,a.kt)("inlineCode",{parentName:"p"},"stream")," method, which result will be a stream of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Item")," which contains a ",(0,a.kt)("inlineCode",{parentName:"p"},"raw")," field that represents a document using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Json")," type from the ZIO JSON library."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val request: SearchRequest =\n  ElasticRequest.search(IndexName("index"), ElasticQuery.range("id").gte(5))\n\nval defaultStream: ZStream[Elasticsearch, Throwable, Item] =\n  Elasticsearch.stream(request)\n\nval scrollStream: ZStream[Elasticsearch, Throwable, Item]  =\n  Elasticsearch.stream(request, StreamConfig.Scroll)\n')))}u.isMDXComponent=!0}}]);