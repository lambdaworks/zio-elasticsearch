"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6084],{1318:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var t=r(5893),i=r(1151);const n={id:"elastic_query_regexp",title:"Regexp Query"},a=void 0,c={id:"overview/queries/elastic_query_regexp",title:"Regexp Query",description:"The Regexp query returns documents that contain terms matching a regular expression.",source:"@site/../modules/docs/target/mdoc/overview/queries/elastic_query_regexp.md",sourceDirName:"overview/queries",slug:"/overview/queries/elastic_query_regexp",permalink:"/zio-elasticsearch/overview/queries/elastic_query_regexp",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/queries/elastic_query_regexp.md",tags:[],version:"current",frontMatter:{id:"elastic_query_regexp",title:"Regexp Query"},sidebar:"docs",previous:{title:"Range Query",permalink:"/zio-elasticsearch/overview/queries/elastic_query_range"},next:{title:"Term Query",permalink:"/zio-elasticsearch/overview/queries/elastic_query_term"}},o={},l=[];function u(e){const s=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"Regexp"})," query returns documents that contain terms matching a regular expression."]}),"\n",(0,t.jsxs)(s.p,{children:["In order to use the ",(0,t.jsx)(s.code,{children:"Regexp"})," query import the following:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-scala",children:"import zio.elasticsearch.query.RegexpQuery\nimport zio.elasticsearch.ElasticQuery._\n"})}),"\n",(0,t.jsxs)(s.p,{children:["You can create a ",(0,t.jsx)(s.code,{children:"Regexp"})," query using the ",(0,t.jsx)(s.code,{children:"regexp"})," method this way:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-scala",children:'val query: RegexpQuery = regexp(field = "name", value = "t.*st")\n'})}),"\n",(0,t.jsxs)(s.p,{children:["You can create a ",(0,t.jsx)(s.a,{href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema",children:"type-safe"})," ",(0,t.jsx)(s.code,{children:"Regexp"})," query using the ",(0,t.jsx)(s.code,{children:"regexp"})," method this way:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-scala",children:'val query: RegexpQuery = regexp(field = Document.name, value = "t.*st")\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If you want to change the ",(0,t.jsx)(s.code,{children:"case_insensitive"}),", you can use ",(0,t.jsx)(s.code,{children:"caseInsensitive"}),", ",(0,t.jsx)(s.code,{children:"caseInsensitiveFalse"})," or ",(0,t.jsx)(s.code,{children:"caseInsensitiveTrue"})," method:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-scala",children:'val queryWithCaseInsensitive: RegexpQuery = regexp(field = Document.name, value = "t.*st").caseInsensitive(true)\nval queryWithCaseInsensitiveFalse: RegexpQuery = regexp(field = Document.name, value = "t.*st").caseInsensitiveFalse\nval queryWithCaseInsensitiveTrue: RegexpQuery = regexp(field = Document.name, value = "t.*st").caseInsensitiveTrue\n'})}),"\n",(0,t.jsxs)(s.p,{children:["You can find more information about ",(0,t.jsx)(s.code,{children:"Regexp"})," query ",(0,t.jsx)(s.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-regexp-query.html",children:"here"}),"."]})]})}const d=function(e={}){const{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,t.jsx)(s,Object.assign({},e,{children:(0,t.jsx)(u,e)})):u(e)}},1151:(e,s,r)=>{r.d(s,{Zo:()=>c,ah:()=>n});var t=r(7294);const i=t.createContext({});function n(e){const s=t.useContext(i);return t.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const a={};function c({components:e,children:s,disableParentContext:r}){let c;return c=r?"function"==typeof e?e({}):e||a:n(e),t.createElement(i.Provider,{value:c},s)}}}]);