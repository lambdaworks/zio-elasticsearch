"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[287],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>v});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,v=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(v,i(i({ref:t},u),{},{components:r})):n.createElement(v,i({ref:t},u))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6471:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={id:"overview_bulkable",title:"Bulkable"},i=void 0,l={unversionedId:"overview/overview_bulkable",id:"overview/overview_bulkable",title:"Bulkable",description:"If you want to use Elasticsearch's Bulk API you can do so using the bulk method.",source:"@site/../modules/docs/target/mdoc/overview/bulkable.md",sourceDirName:"overview",slug:"/overview/overview_bulkable",permalink:"/zio-elasticsearch/overview/overview_bulkable",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/bulkable.md",tags:[],version:"current",frontMatter:{id:"overview_bulkable",title:"Bulkable"},sidebar:"docs",previous:{title:"Fluent API",permalink:"/zio-elasticsearch/overview/overview_fluent_api"},next:{title:"Streaming",permalink:"/zio-elasticsearch/overview/overview_streaming"}},c={},s=[],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you want to use Elasticsearch's Bulk API you can do so using the ",(0,a.kt)("inlineCode",{parentName:"p"},"bulk")," method.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"bulk")," method accepts a sequence of bulkable requests which are ",(0,a.kt)("inlineCode",{parentName:"p"},"ElasticRequest")," that inherit the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bulkable")," trait.\nBulk API for Elasticsearch supports only index, create, delete, and update actions and for that reason,\nyou can use only ",(0,a.kt)("inlineCode",{parentName:"p"},"Create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateOrUpdate"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateWithId"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteById")," in your bulkable requests. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'final case class User(id: Int, name: String)\n\nobject User {\n  implicit val schema: Schema.CaseClass2[Int, String, User] =\n    DeriveSchema.gen[User]\n\n  val (id, name) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nval request: BulkRequest = ElasticRequest.bulk(\n  ElasticRequest.create[User](indexName, User(1, "John Doe")),\n  ElasticRequest.create[User](indexName, DocumentId("documentId2"), User(2, "Jane Doe")),\n  ElasticRequest.upsert[User](indexName, DocumentId("documentId3"), User(3, "Richard Roe")),\n  ElasticRequest.deleteById(indexName, DocumentId("documentId2"))\n)\n\nElasticsearch.execute(request)\n')))}d.isMDXComponent=!0}}]);