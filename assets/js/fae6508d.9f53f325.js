"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[128],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,y=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return r?a.createElement(y,i(i({ref:t},d),{},{components:r})):a.createElement(y,i({ref:t},d))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<s;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9182:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const s={id:"overview_zio_prelude_schema",title:"Use of ZIO Prelude and Schema"},i=void 0,o={unversionedId:"overview/overview_zio_prelude_schema",id:"overview/overview_zio_prelude_schema",title:"Use of ZIO Prelude and Schema",description:"ZIO Prelude is a library focused on providing a core set of functional data types and abstractions that can help you solve a variety of day-to-day problems.",source:"@site/../modules/docs/target/mdoc/overview/zio_prelude_schema.md",sourceDirName:"overview",slug:"/overview/overview_zio_prelude_schema",permalink:"/zio-elasticsearch/overview/overview_zio_prelude_schema",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/zio_prelude_schema.md",tags:[],version:"current",frontMatter:{id:"overview_zio_prelude_schema",title:"Use of ZIO Prelude and Schema"},sidebar:"docs",previous:{title:"Upsert Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_upsert"},next:{title:"Executing Requests",permalink:"/zio-elasticsearch/overview/overview_elastic_executor"}},l={},c=[{value:"Type-safety with ZIO Prelude&#39;s Newtype",id:"type-safety-with-zio-preludes-newtype",level:3},{value:"Usage of ZIO Schema and its accessors for type-safety",id:"usage-of-zio-schema-and-its-accessors-for-type-safety",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://zio.github.io/zio-prelude/docs/overview/overview_index"},"ZIO Prelude")," is a library focused on providing a core set of functional data types and abstractions that can help you solve a variety of day-to-day problems."),(0,n.kt)("h3",{id:"type-safety-with-zio-preludes-newtype"},"Type-safety with ZIO Prelude's Newtype"),(0,n.kt)("p",null,"Newtypes provide zero overhead new types and refined new types to allow you to increase the type-safety of your code base with zero overhead and minimal boilerplate.\nThe library uses ZIO Prelude's Newtype for ",(0,n.kt)("inlineCode",{parentName:"p"},"IndexName"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"DocumentId"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"Routing")," in order to preserve type-safety when these types are being created."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val indexName: IndexName   = IndexName("index")\nval documentId: DocumentId = DocumentId("documentId")\n')),(0,n.kt)("h3",{id:"usage-of-zio-schema-and-its-accessors-for-type-safety"},"Usage of ZIO Schema and its accessors for type-safety"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://zio.dev/zio-schema/"},"ZIO Schema")," is a ZIO-based library for modeling the schema of data structures as first-class values.\nTo provide type-safety in your requests ZIO Elasticsearch uses ZIO Schema."),(0,n.kt)("p",null,"Query DSL methods that require a field solely accept field types that are defined as Elasticsearch primitives.\nYou can pass field names simply as strings, or you can use the type-safe query methods that make use of ZIO Schema's accessors."),(0,n.kt)("p",null,"Here is an example of creating a schema for the custom type ",(0,n.kt)("inlineCode",{parentName:"p"},"User")," and using implicit schema to create accessors which results in type-safe query methods.\nYou can also represent a field from nested structures with type-safe query methods, using the ",(0,n.kt)("inlineCode",{parentName:"p"},"/")," operator on accessors, as shown below."),(0,n.kt)("p",null,"If your field name has different naming in Elasticsearch's index then you can use the ",(0,n.kt)("inlineCode",{parentName:"p"},'@fieldName("...")')," annotation, in which case the library\nwill use the name from the annotation when making the request."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'final case class Address(street: String, number: Int)\n\nobject Address {\n  implicit val schema: Schema.CaseClass2[String, Int, Address] =\n    DeriveSchema.gen[Address]\n\n  val (street, number) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nfinal case class User(\n  @fieldName("_id")\n  id: Int,\n  email: String,\n  address: Address\n)\n\nobject User {\n  implicit val schema: Schema.CaseClass3[Int, String, Address, User] =\n    DeriveSchema.gen[User]\n\n  val (id, email, address) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nval query: BoolQuery[User] =\n  ElasticQuery\n    .must(ElasticQuery.range(User.id).gte(7).lt(10))\n    .should(ElasticQuery.startsWith(User.address / Address.street, "ZIO"))\n\nval aggregation: TermsAggregation =\n  ElasticAggregation\n    .termsAggregation("termsAgg", User.address / Address.street)\n\nval request: SearchAndAggregateRequest =\n  ElasticRequest\n    .search(IndexName("index"), query)\n    .aggregate(aggregation)\n\nval result: RIO[Elasticsearch, SearchResult] = Elasticsearch.execute(request)\n')),(0,n.kt)("p",null,"Accessors also have a ",(0,n.kt)("inlineCode",{parentName:"p"},"suffix")," method, in case you want to use one in queries:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'ElasticQuery.term("email.keyword", "jane.doe@lambdaworks.io")\n\n// type-safe method\nElasticQuery.term(User.email.suffix("keyword"), "jane.doe@lambdaworks.io")\n')),(0,n.kt)("p",null,"In case the suffix is ",(0,n.kt)("inlineCode",{parentName:"p"},'"keyword"')," or ",(0,n.kt)("inlineCode",{parentName:"p"},'"raw"')," you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"keyword")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"raw")," methods respectively."))}p.isMDXComponent=!0}}]);