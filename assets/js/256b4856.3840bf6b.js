"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6244],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),l=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,g=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return r?n.createElement(g,s(s({ref:t},u),{},{components:r})):n.createElement(g,s({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[p]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7342:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={id:"elastic_request",title:"Overview"},s=void 0,c={unversionedId:"overview/elastic_request",id:"overview/elastic_request",title:"Overview",description:"We can represent an Elasticsearch request as a generic data type ElasticRequest[A], where A represents the result of the executed request.",source:"@site/../modules/docs/target/mdoc/overview/elastic_request.md",sourceDirName:"overview",slug:"/overview/elastic_request",permalink:"/zio-elasticsearch/overview/elastic_request",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/elastic_request.md",tags:[],version:"current",frontMatter:{id:"elastic_request",title:"Overview"},sidebar:"docs",previous:{title:"Terms Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_terms"},next:{title:"Aggregation Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_aggregate"}},o={},l=[],u={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We can represent an Elasticsearch request as a generic data type ",(0,a.kt)("inlineCode",{parentName:"p"},"ElasticRequest[A]"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," represents the result of the executed request.\nThe library offers a DSL for creating these requests, by specifying their required parameters."),(0,a.kt)("p",null,"For example, we can create a request for deleting a document with a specified index as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ElasticRequest.deleteById(IndexName("index"), DocumentId("documentId"))\n')),(0,a.kt)("p",null,"As you can see above, index names and document IDs are represented with ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexName")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DocumentId")," respectively,\nusing Newtypes from ZIO Prelude, to increase type-safety with no runtime overhead."),(0,a.kt)("p",null,"Elastic requests for creating and deleting return ",(0,a.kt)("inlineCode",{parentName:"p"},"CreationOutcome")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DeletionOutcome")," respectively, notifying us of the outcome of the request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticRequest._\n\nval createIndexWithoutMappingResult: RIO[Elasticsearch, CreationOutcome] =\n  Elasticsearch.execute(createIndex(IndexName("index")))\n        \nval createIndexWithMappingResult: RIO[Elasticsearch, CreationOutcome] =\n  Elasticsearch.execute(createIndex(IndexName("index"), "..."))\n      \nval deleteIndexResult: RIO[Elasticsearch, DeletionOutcome] =\n  Elasticsearch.execute(deleteIndex(IndexName("index")))\n')),(0,a.kt)("p",null,"All the DSL methods for request creation can be brought into scope with the following import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest._\n")),(0,a.kt)("p",null,"Executing the ",(0,a.kt)("inlineCode",{parentName:"p"},"getById")," request returns the following effect, where ",(0,a.kt)("inlineCode",{parentName:"p"},"GetResult")," represents a successful value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticRequest._\nimport zio.elasticsearch.result.{DecodingException, GetResult}\n\nval getByIdResult: RIO[Elasticsearch, GetResult] =\n  Elasticsearch.execute(getById(IndexName("index"), DocumentId("documentId")))\n')),(0,a.kt)("p",null,"To return a document of custom type ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", you must create a schema for ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),". Here is an example of creating a schema for a custom type ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.schema.{DeriveSchema, Schema}\n\nfinal case class User(id: String, name: String, email: String, age: Int)\n\nobject User {\n  implicit val schema: Schema[User] = DeriveSchema.gen[User]\n}\n")),(0,a.kt)("p",null,"As long as we have the implicit schema value in scope, we can transform ",(0,a.kt)("inlineCode",{parentName:"p"},"GetResult")," to a desired type ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val getUserByIdResult: RIO[Elasticsearch, IO[DecodingException, Option[User]]] =\n  Elasticsearch.execute(getById(IndexName("index"), DocumentId("documentId")))\n    .map(_.documentAs[User])\n')))}m.isMDXComponent=!0}}]);