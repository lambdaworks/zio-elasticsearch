"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[9924],{6293:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>n,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"overview/queries/elastic_query_multi_match","title":"Multi Match Query","description":"The MultiMatch query builds on the match query to allow multi-field queries.","source":"@site/../modules/docs/target/mdoc/overview/queries/elastic_query_multi_match.md","sourceDirName":"overview/queries","slug":"/overview/queries/elastic_query_multi_match","permalink":"/zio-elasticsearch/overview/queries/elastic_query_multi_match","draft":false,"unlisted":false,"editUrl":"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/queries/elastic_query_multi_match.md","tags":[],"version":"current","frontMatter":{"id":"elastic_query_multi_match","title":"Multi Match Query"},"sidebar":"docs","previous":{"title":"Match Phrase Prefix Query","permalink":"/zio-elasticsearch/overview/queries/elastic_query_match_phrase_prefix"},"next":{"title":"Nested Query","permalink":"/zio-elasticsearch/overview/queries/elastic_query_nested"}}');var c=i(4848),a=i(8453);const l={id:"elastic_query_multi_match",title:"Multi Match Query"},r=void 0,n={},u=[];function o(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"MultiMatch"})," query builds on the ",(0,c.jsx)(t.code,{children:"match"})," query to allow multi-field queries."]}),"\n",(0,c.jsxs)(t.p,{children:["In order to use the ",(0,c.jsx)(t.code,{children:"MultiMatch"})," query import the following:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"import zio.elasticsearch.query.MultiMatchQuery\nimport zio.elasticsearch.ElasticQuery._\n"})}),"\n",(0,c.jsxs)(t.p,{children:["You can create a ",(0,c.jsx)(t.code,{children:"MultiMatch"})," query without specifying fields using the ",(0,c.jsx)(t.code,{children:"multiMatch"})," method this way:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val query: MultiMatchQuery = multiMatch(value = "test")\n'})}),"\n",(0,c.jsxs)(t.p,{children:["If you want to change the ",(0,c.jsx)(t.code,{children:"fields"})," that will be searched, you can use the ",(0,c.jsx)(t.code,{children:"fields"})," method:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val query: MultiMatchQuery = multiMatch(value = "test").fields("stringField1", "stringField2")\n'})}),"\n",(0,c.jsxs)(t.p,{children:["If you want to change the ",(0,c.jsx)(t.code,{children:"fields"})," that will be searched, you can use the ",(0,c.jsx)(t.code,{children:"fields"})," method with the ",(0,c.jsx)(t.a,{href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema",children:"type-safe"})," parameters this way:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val query: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2)\n'})}),"\n",(0,c.jsxs)(t.p,{children:["If you want to change the ",(0,c.jsx)(t.code,{children:"boost"}),", you can use the ",(0,c.jsx)(t.code,{children:"boost"})," method:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val queryWithBoost: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2).boost(2.2)\n'})}),"\n",(0,c.jsxs)(t.p,{children:["If you want to change the ",(0,c.jsx)(t.code,{children:"minimum_should_match"}),", you can use the ",(0,c.jsx)(t.code,{children:"minimumShouldMatch"})," method:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val queryWithMinimumShouldMatch: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2).minimumShouldMatch(2)\n'})}),"\n",(0,c.jsxs)(t.p,{children:["If you want to change the ",(0,c.jsx)(t.code,{children:"type"}),", you can use the ",(0,c.jsx)(t.code,{children:"matchingType"})," method:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.query.MultiMatchType._\n\nval queryWithType: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2).matchingType(MostFields)\n'})}),"\n",(0,c.jsxs)(t.p,{children:["You can find more information about ",(0,c.jsx)(t.code,{children:"MultiMatch"})," query ",(0,c.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-multi-match-query.html#query-dsl-multi-match-query",children:"here"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>r});var s=i(6540);const c={},a=s.createContext(c);function l(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);