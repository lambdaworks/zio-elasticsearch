"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[182],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1991:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={id:"overview_elastic_executor",title:"Executing Requests"},o=void 0,l={unversionedId:"overview/overview_elastic_executor",id:"overview/overview_elastic_executor",title:"Executing Requests",description:"In order to get the functional effect of executing a specified Elasticsearch request, you should call the execute method defined in the Elasticsearch, which returns a ZIO that requires an Elasticsearch, fails with a Throwable and returns the relevant value A for that request.",source:"@site/../modules/docs/target/mdoc/overview/elastic_executor.md",sourceDirName:"overview",slug:"/overview/overview_elastic_executor",permalink:"/zio-elasticsearch/overview/overview_elastic_executor",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/elastic_executor.md",tags:[],version:"current",frontMatter:{id:"overview_elastic_executor",title:"Executing Requests"},sidebar:"docs",previous:{title:"Use of ZIO Prelude and Schema",permalink:"/zio-elasticsearch/overview/overview_zio_prelude_schema"},next:{title:"Fluent API",permalink:"/zio-elasticsearch/overview/overview_fluent_api"}},c={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to get the functional effect of executing a specified Elasticsearch request, you should call the ",(0,a.kt)("inlineCode",{parentName:"p"},"execute")," method defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Elasticsearch"),", which returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO")," that requires an ",(0,a.kt)("inlineCode",{parentName:"p"},"Elasticsearch"),", fails with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Throwable")," and returns the relevant value ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," for that request.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"Elasticsearch.layer")," can be provided using the following import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.Elasticsearch\n")),(0,a.kt)("p",null,"However, ",(0,a.kt)("inlineCode",{parentName:"p"},"Elasticsearch.layer")," requires a dependency on the ",(0,a.kt)("inlineCode",{parentName:"p"},"ElasticExector"),".\nTo provide the dependency on ",(0,a.kt)("inlineCode",{parentName:"p"},"ElasticExecutor"),", you must pass one of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ZLayer"),"s from the following import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticExecutor\n")),(0,a.kt)("p",null,"For example, if you want to execute requests on an Elasticsearch server running on ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost")," and port ",(0,a.kt)("inlineCode",{parentName:"p"},"9200"),", you can achieve that in two ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"provide the ",(0,a.kt)("inlineCode",{parentName:"li"},"live")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ZLayer")," to your effect, along with a ",(0,a.kt)("inlineCode",{parentName:"li"},"SttpBackend")," and an ",(0,a.kt)("inlineCode",{parentName:"li"},"ElasticConfig")," layer,"),(0,a.kt)("li",{parentName:"ul"},"or provide ",(0,a.kt)("inlineCode",{parentName:"li"},"ElasticExecutor.local")," layer along with a ",(0,a.kt)("inlineCode",{parentName:"li"},"SttpBackend"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.elasticsearch._\nimport sttp.client3.httpclient.zio.HttpClientZioBackend\n\nval result: RIO[Elasticsearch, Boolean] =\n  Elasticsearch.execute(ElasticRequest.exists(IndexName("index"), DocumentId("documentId")))\n\n// Executing Elasticsearch requests with provided ElasticConfig layer explicitly\nresult.provide(\n  ZLayer.succeed(ElasticConfig("localhost", 9200)) >>> ElasticExecutor.live,\n  Elasticsearch.layer,\n  HttpClientZioBackend.layer()\n)\n\n// Executing Elasticsearch requests with local ElasticExecutor\nresult.provide(\n  ElasticExecutor.local,\n  Elasticsearch.layer,\n  HttpClientZioBackend.layer()\n)\n')))}d.isMDXComponent=!0}}]);