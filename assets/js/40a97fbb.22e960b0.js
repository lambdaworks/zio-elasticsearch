"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8853],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=l(r),m=n,d=g["".concat(c,".").concat(m)]||g[m]||p[m]||i;return r?a.createElement(d,s(s({ref:t},u),{},{components:r})):a.createElement(d,s({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[g]="string"==typeof e?e:n,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2542:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const i={id:"elastic_request_aggregate",title:"Aggregation Request"},s=void 0,o={unversionedId:"overview/requests/elastic_request_aggregate",id:"overview/requests/elastic_request_aggregate",title:"Aggregation Request",description:"This request is used to create aggregations which summarizes your data as metrics, statistics, or other analytics.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_aggregate.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_aggregate",permalink:"/zio-elasticsearch/overview/requests/elastic_request_aggregate",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_aggregate.md",tags:[],version:"current",frontMatter:{id:"elastic_request_aggregate",title:"Aggregation Request"},sidebar:"docs",previous:{title:"Overview",permalink:"/zio-elasticsearch/overview/elastic_request"},next:{title:"Bulk Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_bulk"}},c={},l=[],u={toc:l},g="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(g,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This request is used to create aggregations which summarizes your data as metrics, statistics, or other analytics."),(0,n.kt)("p",null,"To create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Aggregate")," request do the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.ElasticRequest.AggregateRequest\nimport zio.elasticsearch.ElasticRequest.aggregate\n// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticAggregation._\n\nval request: AggregateRequest = aggregate(name = IndexName("index"), aggregation = maxAggregation(name = "aggregation", field = "intField"))\n')),(0,n.kt)("p",null,"You can find more information about ",(0,n.kt)("inlineCode",{parentName:"p"},"Aggregate")," request ",(0,n.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-aggregations.html"},"here"),"."))}p.isMDXComponent=!0}}]);