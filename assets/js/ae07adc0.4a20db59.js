"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8860],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,h=d["".concat(u,".").concat(m)]||d[m]||l[m]||i;return r?n.createElement(h,s(s({ref:t},p),{},{components:r})):n.createElement(h,s({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},698:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={id:"elastic_request_update",title:"Update Request"},s=void 0,o={unversionedId:"overview/requests/elastic_request_update",id:"overview/requests/elastic_request_update",title:"Update Request",description:"This request is used for updating a document either with script or with other document as parameter.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_update.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_update",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_update.md",tags:[],version:"current",frontMatter:{id:"elastic_request_update",title:"Update Request"},sidebar:"docs",previous:{title:"Search Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_search"},next:{title:"Update By Query Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update_by_query"}},u={},c=[],p={toc:c},d="wrapper";function l(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This request is used for updating a document either with script or with other document as parameter."),(0,a.kt)("p",null,"In order to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Update")," request import the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest.UpdateRequest\nimport zio.elasticsearch.ElasticRequest._\n")),(0,a.kt)("p",null,"You can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Update")," request using the ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," method with specified document this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `IndexName` and `DocumentId`\nimport zio.elasticsearch._\nimport zio.schema.Schema\n\n// example of document\nfinal case class User(id: String, username: String)\n\nval user: User = User(id = "1", username = "johndoe")\n\nimplicit val schema: Schema.CaseClass2[String, String, User] = DeriveSchema.gen[GitHubRepo]\n\nval request: UpdateRequest = update(index = IndexName("index"), id = DocumentId("documentId"), doc = user)\n')),(0,a.kt)("p",null,"You can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Update")," request using the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateByScript")," method with specified script this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch._\nimport zio.elasticsearch.script.Script\n\nval request: UpdateRequest = updateByScript(index = IndexName("index"), id = DocumentId("documentId"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n')),(0,a.kt)("p",null,"If you want to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"upsert"),", you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"orCreate")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val newUser: User = User(id = "2", username = "janedoe")\n\nval requestWithUpsert: UpdateRequest = update(index = IndexName("index"), id = DocumentId("documentId"), doc = user).orCreate(newUser)\n')),(0,a.kt)("p",null,"If you want to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"refresh"),", you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"refresh"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"refreshFalse")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"refreshTrue")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val requestWithRefresh: UpdateRequest = update(index = IndexName("index"), id = DocumentId("documentId"), doc = user).refresh(true)\nval requestWithRefreshFalse: UpdateRequest = update(index = IndexName("index"), id = DocumentId("documentId"), doc = user).refreshFalse\nval requestWithRefreshTrue: UpdateRequest = update(index = IndexName("index"), id = DocumentId("documentId"), doc = user).refreshTrue\n')),(0,a.kt)("p",null,"If you want to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"routing"),", you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"routing")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval requestWithRouting: UpdateRequest = update(index = IndexName("index"), id = DocumentId("documentId"), doc = user).routing(Routing("routing"))\n')),(0,a.kt)("p",null,"You can find more information about ",(0,a.kt)("inlineCode",{parentName:"p"},"Update")," request ",(0,a.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update.html"},"here"),"."))}l.isMDXComponent=!0}}]);