"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1376],{4807:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(5893),o=r(3905);const a={id:"overview_fluent_api",title:"Fluent API"},s=void 0,i={unversionedId:"overview/overview_fluent_api",id:"overview/overview_fluent_api",title:"Fluent API",description:"Both Elastic requests and queries offer a fluent API so that we could provide optional parameters in chained method calls for each request or query.",source:"@site/../modules/docs/target/mdoc/overview/fluent_api.md",sourceDirName:"overview",slug:"/overview/overview_fluent_api",permalink:"/zio-elasticsearch/overview/overview_fluent_api",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/fluent_api.md",tags:[],version:"current",frontMatter:{id:"overview_fluent_api",title:"Fluent API"},sidebar:"docs",previous:{title:"Executing Requests",permalink:"/zio-elasticsearch/overview/overview_elastic_executor"},next:{title:"Bulkable",permalink:"/zio-elasticsearch/overview/overview_bulkable"}},c={},l=[];function d(e){const t=Object.assign({p:"p",code:"code",pre:"pre"},(0,o.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Both Elastic requests and queries offer a fluent API so that we could provide optional parameters in chained method calls for each request or query.\nIf you are creating a ",(0,n.jsx)(t.code,{children:"Bool"})," query that can possibly contain ",(0,n.jsx)(t.code,{children:"must"}),", ",(0,n.jsx)(t.code,{children:"mustNot"}),", ",(0,n.jsx)(t.code,{children:"should"}),", and ",(0,n.jsx)(t.code,{children:"filter"})," queries, you can just use one of the methods from the ",(0,n.jsx)(t.code,{children:"ElasticQuery"})," object to create any of them and then just fluently chain any other to the original one."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'ElasticQuery.must(ElasticQuery.range("version").gte(7).lt(10)).should(ElasticQuery.startsWith("name", "ZIO"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["And if we wanted to specify lower and upper bounds for a ",(0,n.jsx)(t.code,{children:"range"})," query:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"ElasticQuery.range(User.age).gte(18).lt(100)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Fluent API is also supported for parameters like ",(0,n.jsx)(t.code,{children:"routing"})," and ",(0,n.jsx)(t.code,{children:"refresh"}),", for example, if we wanted to add routing and refresh parameters to a ",(0,n.jsx)(t.code,{children:"deleteById"})," request:\nMethods ",(0,n.jsx)(t.code,{children:"refreshTrue"})," and ",(0,n.jsx)(t.code,{children:"refreshFalse"})," are just shortcuts for using ",(0,n.jsx)(t.code,{children:"refresh(true)"})," or ",(0,n.jsx)(t.code,{children:"refresh(false)"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'ElasticRequest.deleteById(IndexName("index"), DocumentId("documentId")).routing(Routing("routing")).refreshTrue\n'})}),"\n",(0,n.jsxs)(t.p,{children:["When creating aggregations we can also use ",(0,n.jsx)(t.code,{children:"withAgg"})," method to add another aggregation and return the ",(0,n.jsx)(t.code,{children:"MultipleAggregations"})," type that contains both aggregations."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'ElasticAggregation.termsAggregation(name = "firstAggregation", field = "name")\n  .withAgg(ElasticAggregation.termsAggregation(name = "secondAggregation", field = "age"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Creating ",(0,n.jsx)(t.code,{children:"sort"})," also supports fluent API, as it is shown in the code below:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'ElasticSort.sortBy("age").mode(SortMode.Avg)\nElasticSort.sortBy("first_name").missing(Missing.First)\nElasticSort.sortBy("created_at").format("strict_date_optional_time_nanos")\n'})})]})}const u=function(e={}){const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(d,e)})):d(e)}},3905:(e,t,r)=>{r.d(t,{ah:()=>l});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=l(r),p=o,g=h["".concat(c,".").concat(p)]||h[p]||d[p]||a;return r?n.createElement(g,s(s({ref:t},u),{},{components:r})):n.createElement(g,s({ref:t},u))}));u.displayName="MDXCreateElement"}}]);