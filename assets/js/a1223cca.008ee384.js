"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5380],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),c=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,u=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return r?a.createElement(h,s(s({ref:t},l),{},{components:r})):a.createElement(h,s({ref:t},l))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[d]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3502:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={id:"elastic_request_create",title:"Create Request, CreateWithId Request and CreateOrUpdate Request"},s=void 0,o={unversionedId:"overview/requests/elastic_request_create",id:"overview/requests/elastic_request_create",title:"Create Request, CreateWithId Request and CreateOrUpdate Request",description:"The Create, the CreateWithId and the CreateOrUpdate requests add a JSON document to the specified data stream and make it searchable.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_create.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_create",permalink:"/zio-elasticsearch/overview/requests/elastic_request_create",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_create.md",tags:[],version:"current",frontMatter:{id:"elastic_request_create",title:"Create Request, CreateWithId Request and CreateOrUpdate Request"},sidebar:"docs",previous:{title:"Count Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_count"},next:{title:"Create Index Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_create_index"}},u={},c=[],l={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Create"),", the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateWithId")," and the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateOrUpdate")," requests add a JSON document to the specified data stream and make it searchable."),(0,n.kt)("p",null,"There are three ways of adding documents to the Elasticsearch index:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"By using ",(0,n.kt)("inlineCode",{parentName:"li"},"Create")," request - creates a JSON document without specifying ID (Elasticsearch creates one)"),(0,n.kt)("li",{parentName:"ol"},"By using ",(0,n.kt)("inlineCode",{parentName:"li"},"CreateWithId")," request - creates a JSON document with specified ID"),(0,n.kt)("li",{parentName:"ol"},"By using ",(0,n.kt)("inlineCode",{parentName:"li"},"CreateOrUpdate")," request - creates JSON document with specified ID, or updates the document (if it already exists)")),(0,n.kt)("p",null,"In order to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"Create")," request import the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest.CreateRequest\nimport zio.elasticsearch.ElasticRequest.create\n")),(0,n.kt)("p",null,"In order to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateWithId")," request import the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest.CreateWithIdRequest\nimport zio.elasticsearch.ElasticRequest.create\n")),(0,n.kt)("p",null,"In order to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateOrUpdate")," request import the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest.CreateOrUpdateRequest\nimport zio.elasticsearch.ElasticRequest.upsert\n")),(0,n.kt)("p",null,"Except imports, you must specify a document you want to create, with its implicit schema."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.schema.Schema\n// example of document\nfinal case class User(id: String, username: String)\n\nval user: User = User(id = "1", username = "johndoe")\n\nimplicit val schema: Schema.CaseClass2[String, String, User] = DeriveSchema.gen[GitHubRepo]\n')),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Create")," request using the ",(0,n.kt)("inlineCode",{parentName:"p"},"create")," method this way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `IndexName`\nimport zio.elasticsearch._\n\nval request: CreateRequest = create(index = IndexName("index"), doc = user)\n')),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateWithId")," request using the ",(0,n.kt)("inlineCode",{parentName:"p"},"create")," method this way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `DocumentId` also\nimport zio.elasticsearch._ \n\nval request: CreateWithIdRequest = create(index = IndexName("index"), id = DocumentId("documentId"), doc = user)\n')),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateOrUpdate")," request using the ",(0,n.kt)("inlineCode",{parentName:"p"},"upsert")," method this way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch._ \n\nval request: CreateOrUpdateRequest = upsert(index = IndexName("index"), id = DocumentId("documentId"), doc = user)\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"refresh"),", you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"refresh"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"refreshFalse")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"refreshTrue")," method on any of previously mentioned requests:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val requestWithRefresh: CreateRequest = create(index = IndexName("index"), doc = user).refresh(true)\nval requestWithRefreshFalse: CreateWithIdRequest = create(index = IndexName("index"), id = DocumentId("documentId"), doc = user).refreshFalse\nval requestWithRefreshTrue: CreateOrUpdateRequest = upsert(index = IndexName("index"), id = DocumentId("documentId"), doc = user).refreshTrue\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"routing"),", you can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"routing")," method on any of previously mentioned requests:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval request1WithRouting: CreateRequest = create(index = IndexName("index"), doc = user).routing(Routing("routing"))\nval request2WithRouting: CreateWithIdRequest = create(index = IndexName("index"), id = DocumentId("documentId"), doc = user).routing(Routing("routing"))\nval request3WithRouting: CreateOrUpdateRequest = upsert(index = IndexName("index"), id = DocumentId("documentId"), doc = user).routing(Routing("routing"))\n')),(0,n.kt)("p",null,"You can find more information about ",(0,n.kt)("inlineCode",{parentName:"p"},"Create"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateWithId"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateOrUpdate")," requests ",(0,n.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-index_.html"},"here"),"."))}p.isMDXComponent=!0}}]);