"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6335],{9427:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>n,contentTitle:()=>r,default:()=>o,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var s=i(5893),c=i(1151);const a={id:"elastic_query_multi_match",title:"Multi Match Query"},r=void 0,l={unversionedId:"overview/queries/elastic_query_multi_match",id:"overview/queries/elastic_query_multi_match",title:"Multi Match Query",description:"The MultiMatch query builds on the match query to allow multi-field queries.",source:"@site/../modules/docs/target/mdoc/overview/queries/elastic_query_multi_match.md",sourceDirName:"overview/queries",slug:"/overview/queries/elastic_query_multi_match",permalink:"/zio-elasticsearch/overview/queries/elastic_query_multi_match",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/queries/elastic_query_multi_match.md",tags:[],version:"current",frontMatter:{id:"elastic_query_multi_match",title:"Multi Match Query"},sidebar:"docs",previous:{title:"Match Phrase Prefix Query",permalink:"/zio-elasticsearch/overview/queries/elastic_query_match_phrase_prefix"},next:{title:"Nested Query",permalink:"/zio-elasticsearch/overview/queries/elastic_query_nested"}},n={},u=[];function h(e){const t=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"MultiMatch"})," query builds on the ",(0,s.jsx)(t.code,{children:"match"})," query to allow multi-field queries."]}),"\n",(0,s.jsxs)(t.p,{children:["In order to use the ",(0,s.jsx)(t.code,{children:"MultiMatch"})," query import the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import zio.elasticsearch.query.MultiMatchQuery\nimport zio.elasticsearch.ElasticQuery._\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can create a ",(0,s.jsx)(t.code,{children:"MultiMatch"})," query without specifying fields using the ",(0,s.jsx)(t.code,{children:"multiMatch"})," method this way:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val query: MultiMatchQuery = multiMatch(value = "test")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"fields"})," that will be searched, you can use the ",(0,s.jsx)(t.code,{children:"fields"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val query: MultiMatchQuery = multiMatch(value = "test").fields("stringField1", "stringField2")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"fields"})," that will be searched, you can use the ",(0,s.jsx)(t.code,{children:"fields"})," method with the ",(0,s.jsx)(t.a,{href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema",children:"type-safe"})," parameters this way:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val query: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"boost"}),", you can use the ",(0,s.jsx)(t.code,{children:"boost"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val queryWithBoost: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2).boost(2.2)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"minimum_should_match"}),", you can use the ",(0,s.jsx)(t.code,{children:"minimumShouldMatch"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val queryWithMinimumShouldMatch: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2).minimumShouldMatch(2)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"type"}),", you can use the ",(0,s.jsx)(t.code,{children:"matchingType"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.query.MultiMatchType._\n\nval queryWithType: MultiMatchQuery = multiMatch(value = "test").fields(Document.stringField1, Document.stringField2).matchingType(MostFields)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can find more information about ",(0,s.jsx)(t.code,{children:"MultiMatch"})," query ",(0,s.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-multi-match-query.html#query-dsl-multi-match-query",children:"here"}),"."]})]})}const o=function(e={}){const{wrapper:t}=Object.assign({},(0,c.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(h,e)})):h(e)}},1151:(e,t,i)=>{i.d(t,{Zo:()=>l,ah:()=>a});var s=i(7294);const c=s.createContext({});function a(e){const t=s.useContext(c);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const r={};function l({components:e,children:t,disableParentContext:i}){let l;return l=i?"function"==typeof e?e({}):e||r:a(e),s.createElement(c.Provider,{value:l},t)}}}]);