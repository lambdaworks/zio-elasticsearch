"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[527],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return r?a.createElement(f,s(s({ref:t},m),{},{components:r})):a.createElement(f,s({ref:t},m))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8135:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={id:"elastic_query",title:"Overview"},s=void 0,o={unversionedId:"overview/elastic_query",id:"overview/elastic_query",title:"Overview",description:"In order to execute Elasticsearch query requests, both for searching and deleting by query,",source:"@site/../modules/docs/target/mdoc/overview/elastic_query.md",sourceDirName:"overview",slug:"/overview/elastic_query",permalink:"/zio-elasticsearch/overview/elastic_query",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/elastic_query.md",tags:[],version:"current",frontMatter:{id:"elastic_query",title:"Overview"},sidebar:"docs",previous:{title:"Usage",permalink:"/zio-elasticsearch/overview/overview_usage"},next:{title:"Boolean Query",permalink:"/zio-elasticsearch/overview/queries/elastic_query_bool"}},l={},c=[],m={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"In order to execute Elasticsearch query requests, both for searching and deleting by query,\nyou first must specify the type of the query along with the corresponding parameters for that type.\nQueries are described with the ",(0,n.kt)("inlineCode",{parentName:"p"},"ElasticQuery")," data type, which can be constructed from the DSL methods found under the following import:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticQuery._\n")),(0,n.kt)("p",null,"Query DSL methods that require a field solely accept field types that are defined as Elasticsearch primitives.\nYou can pass field names simply as strings, or you can use the type-safe query methods that make use of ZIO Schema's accessors.\nAn example with a ",(0,n.kt)("inlineCode",{parentName:"p"},"term")," query is shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'final case class User(id: Int, name: String)\n\nobject User {\n  implicit val schema: Schema.CaseClass2[Int, String, User] =\n    DeriveSchema.gen[User]\n\n  val (id, name) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nterm("name", "John Doe")\n\n// type-safe method\nterm(field = User.name, value = "John Doe")\n')),(0,n.kt)("p",null,"You can also represent a field from nested structures with type-safe query methods, using the ",(0,n.kt)("inlineCode",{parentName:"p"},"/")," operator on accessors:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\nimport zio.schema.annotation.fieldName\nimport zio.schema.{DeriveSchema, Schema}\n\nfinal case class Name(\n  @fieldName("first_name")\n  firstName: String,\n  @fieldName("last_name")\n  lastName: String\n)\n\nobject Name {\n  implicit val schema: Schema.CaseClass2[String, String, Name] = DeriveSchema.gen[Name]\n\n  val (firstName, lastName) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nfinal case class User(id: String, name: Name, email: String, age: Int)\n\nobject User {\n  implicit val schema: Schema.CaseClass4[String, Name, String, Int, User] = \n    DeriveSchema.gen[User]\n\n  val (id, name, email, age) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nmatches(field = "name.first_name", value = "John")\n\n// type-safe method\nmatches(field = User.name / Name.firstName, value = "John")\n')),(0,n.kt)("p",null,"Accessors also have a ",(0,n.kt)("inlineCode",{parentName:"p"},"suffix")," method, in case you want to use one in queries:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'ElasticQuery.term("email.keyword", "jane.doe@lambdaworks.io")\n\n// type-safe method\nElasticQuery.term(User.email.suffix("keyword"), "jane.doe@lambdaworks.io")\n')),(0,n.kt)("p",null,"In case the suffix is ",(0,n.kt)("inlineCode",{parentName:"p"},'"keyword"')," or ",(0,n.kt)("inlineCode",{parentName:"p"},'"raw"')," you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"keyword")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"raw")," methods respectively."),(0,n.kt)("p",null,"Now, after describing a query, you can pass it to the ",(0,n.kt)("inlineCode",{parentName:"p"},"search"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"deleteByQuery")," method to obtain the ",(0,n.kt)("inlineCode",{parentName:"p"},"ElasticRequest")," corresponding to that query:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'ElasticRequest.search(IndexName("index"), term(field = "name.first_name.keyword", value = "John"))\n\n// type-safe method\nElasticRequest.search(IndexName("index"), term(field = User.name / Name.firstName.keyword, value = "John"))\n')))}p.isMDXComponent=!0}}]);