"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5184],{1183:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=t(7624),g=t(2172);const i={id:"elastic_aggregation_value_count",title:"Value count Aggregation"},o=void 0,r={id:"overview/aggregations/elastic_aggregation_value_count",title:"Value count Aggregation",description:"The Value count aggregation is a single-value metrics aggregation that calculates the number of values that an aggregation is based on.",source:"@site/../modules/docs/target/mdoc/overview/aggregations/elastic_aggregation_value_count.md",sourceDirName:"overview/aggregations",slug:"/overview/aggregations/elastic_aggregation_value_count",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_value_count",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/aggregations/elastic_aggregation_value_count.md",tags:[],version:"current",frontMatter:{id:"elastic_aggregation_value_count",title:"Value count Aggregation"},sidebar:"docs",previous:{title:"Terms Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_terms"},next:{title:"Weighted Avg Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_weighted_avg"}},s={},c=[];function l(e){const a=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,g.M)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"Value count"})," aggregation is a single-value metrics aggregation that calculates the number of values that an aggregation is based on."]}),"\n",(0,n.jsxs)(a.p,{children:["In order to use the ",(0,n.jsx)(a.code,{children:"Value count"})," aggregation import the following:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:"import zio.elasticsearch.aggregation.ValueCountAggregation\nimport zio.elasticsearch.ElasticAggregation.valueCountAggregation\n"})}),"\n",(0,n.jsxs)(a.p,{children:["You can create a ",(0,n.jsx)(a.code,{children:"Value count"})," aggregation using the ",(0,n.jsx)(a.code,{children:"valueCountAggregation"})," method this way:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val aggregation: ValueCountAggregation = valueCountAggregation(name = "valueCountAggregation", field = "stringField")\n'})}),"\n",(0,n.jsxs)(a.p,{children:["You can create a ",(0,n.jsx)(a.a,{href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema",children:"type-safe"})," ",(0,n.jsx)(a.code,{children:"Value count"})," aggregation using the ",(0,n.jsx)(a.code,{children:"valueCountAggregation"})," method this way:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val aggregation: ValueCountAggregation = valueCountAggregation(name = "valueCountAggregation", field = Document.stringField)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to add aggregation (on the same level), you can use ",(0,n.jsx)(a.code,{children:"withAgg"})," method:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val multipleAggregations: MultipleAggregations = valueCountAggregation(name = "valueCountAggregation1", field = Document.stringField).withAgg(valueCountAggregation(name = "valueCountAggregation2", field = Document.intField))\n'})}),"\n",(0,n.jsxs)(a.p,{children:["You can find more information about ",(0,n.jsx)(a.code,{children:"Value count"})," aggregation ",(0,n.jsx)(a.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-valuecount-aggregation.html#search-aggregations-metrics-valuecount-aggregation",children:"here"}),"."]})]})}const u=function(e={}){const{wrapper:a}=Object.assign({},(0,g.M)(),e.components);return a?(0,n.jsx)(a,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},2172:(e,a,t)=>{t.d(a,{M:()=>o});var n=t(1504);const g={},i=n.createContext(g);function o(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}}}]);