"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8617],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),c=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),l=c(r),m=n,y=l["".concat(u,".").concat(m)]||l[m]||d[m]||i;return r?a.createElement(y,s(s({ref:t},p),{},{components:r})):a.createElement(y,s({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[l]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5637:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={id:"elastic_request_update_by_query",title:"Update By Query Request"},s=void 0,o={unversionedId:"overview/requests/elastic_request_update_by_query",id:"overview/requests/elastic_request_update_by_query",title:"Update By Query Request",description:"The UpdateByQuery request updates documents that match the specified query. If no query is specified, performs an update on every document in the specified Elasticsearch index.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_update_by_query.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_update_by_query",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update_by_query",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_update_by_query.md",tags:[],version:"current",frontMatter:{id:"elastic_request_update_by_query",title:"Update By Query Request"},sidebar:"docs",previous:{title:"Update Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update"},next:{title:"Use of ZIO Prelude and Schema",permalink:"/zio-elasticsearch/overview/overview_zio_prelude_schema"}},u={},c=[],p={toc:c},l="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(l,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateByQuery")," request updates documents that match the specified query. If no query is specified, performs an update on every document in the specified Elasticsearch index."),(0,n.kt)("p",null,"In order to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateByQuery")," request import the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.ElasticRequest.UpdateByQueryRequest\nimport zio.elasticsearch.ElasticRequest._\n")),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateByQuery")," request using the ",(0,n.kt)("inlineCode",{parentName:"p"},"updateAllByQuery")," method in the following manner:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.script.Script\n\nval request: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n')),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateByQuery")," request using the ",(0,n.kt)("inlineCode",{parentName:"p"},"updateByQuery")," method in the following manner:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch._\nimport zio.elasticsearch.script.Script\nimport zio.elasticsearch.ElasticQuery._\n\nval request: UpdateByQueryRequest = updateByQuery(index = IndexName("index"), query = contains(field = Document.name, value = "test"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"conflicts"),", you can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"conflicts")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.request.UpdateConflicts.Proceed\n\nval requestWithConflicts: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).conflicts(Proceed)\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"refresh"),", you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"refresh"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"refreshFalse")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"refreshTrue")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val requestWithRefresh: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refresh(true)\nval requestWithRefreshFalse: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refreshFalse\nval requestWithRefreshTrue: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refreshTrue\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"routing"),", you can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"routing")," method on any of previously mentioned methods:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval requestWithRouting: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).routing(Routing("routing"))\n')),(0,n.kt)("p",null,"You can find more information about ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateByQuery")," request ",(0,n.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update-by-query.html"},"here"),"."))}d.isMDXComponent=!0}}]);