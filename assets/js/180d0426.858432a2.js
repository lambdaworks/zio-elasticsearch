"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2172],{5059:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var n=r(5893),a=r(3905);const s={id:"elastic_request_search",title:"Search Request"},i=void 0,c={unversionedId:"overview/requests/elastic_request_search",id:"overview/requests/elastic_request_search",title:"Search Request",description:"The Search request allows you to execute a search query (and aggregation) and get back search hits that match the query.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_search.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_search",permalink:"/zio-elasticsearch/overview/requests/elastic_request_search",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_search.md",tags:[],version:"current",frontMatter:{id:"elastic_request_search",title:"Search Request"},sidebar:"docs",previous:{title:"Get By ID Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_get_by_id"},next:{title:"Update Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update"}},l={},o=[];function d(e){const t=Object.assign({p:"p",code:"code",ol:"ol",li:"li",pre:"pre",a:"a"},(0,a.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Search"})," request allows you to execute a search query (and aggregation) and get back search hits that match the query."]}),"\n",(0,n.jsx)(t.p,{children:"There are two ways of executing a search query:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["By using ",(0,n.jsx)(t.code,{children:"Search"})," request"]}),"\n",(0,n.jsxs)(t.li,{children:["By using ",(0,n.jsx)(t.code,{children:"SearchAndAggregate"})," request"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["To create a ",(0,n.jsx)(t.code,{children:"Search"})," request do the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticRequest.SearchRequest\nimport zio.elasticsearch.ElasticRequest.search\n// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\n\nval request: SearchRequest = search(index = IndexName("index"), query = matchAll)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To create a ",(0,n.jsx)(t.code,{children:"SearchAndAggregate"})," request do the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticRequest.SearchAndAggregateRequest\nimport zio.elasticsearch.ElasticRequest.search\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\nimport zio.elasticsearch.ElasticAggregation._\n\nval request: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to add aggregation to ",(0,n.jsx)(t.code,{children:"SearchRequest"}),", you can use the ",(0,n.jsx)(t.code,{children:"aggregate"})," method on it:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticAggregation._\n\nval requestWithAggregation: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll).aggregate(aggregation = maxAggregation(name = "aggregation", field = "intField"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"excludes"}),", you can use the ",(0,n.jsx)(t.code,{children:"excludes"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'val request1WithExcludes: SearchRequest = search(index = IndexName("index"), query = matchAll).excludes("longField")\nval request2WithExcludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).excludes("longField", "intField")\n// type-safe fields:\nval request1TsWithExcludes: SearchRequest = search(index = IndexName("index"), query = matchAll).excludes(Document.longField)\nval request2TsWithExcludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).excludes(Document.longField, Document.intField)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"from"}),", you can use the ",(0,n.jsx)(t.code,{children:"from"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'val request1WithFrom: SearchRequest = search(index = IndexName("index"), query = matchAll).from(2)\nval request2WithFrom: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).from(2)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"highlight"}),", you can use the ",(0,n.jsx)(t.code,{children:"highlights"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticHighlight.highlight\n\nval request1WithHighlights: SearchRequest = search(index = IndexName("index"), query = matchAll).highlights("intField")\nval request2WithHighlights: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).highlights(Document.intField)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"includes"}),", you can use the ",(0,n.jsx)(t.code,{children:"includes"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'val request1WithIncludes: SearchRequest = search(index = IndexName("index"), query = matchAll).includes("longField")\nval request2WithIncludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes("longField", "intField")\n// type-safe fields:\nval request1TsWithIncludes: SearchRequest = search(index = IndexName("index"), query = matchAll).includes(Document.longField)\nval request2TsWithIncludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes(Document.longField, Document.intField)\n// with schema\nval request1WithIncludesSchema: SearchRequest = search(index = IndexName("index"), query = matchAll).includes[Document]\nval request2WithIncludesSchema: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes[Document]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"routing"}),", you can use the ",(0,n.jsx)(t.code,{children:"routing"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval request1WithRouting: SearchRequest = search(index = IndexName("index"), query = matchAll).routing(Routing("routing"))\nval request2WithRouting: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).routing(Routing("routing"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"search_after"}),", you can use the ",(0,n.jsx)(t.code,{children:"searchAfter"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'import zio.json.ast.Json.{Arr, Str}\n\nval request1WithSearchAfter: SearchRequest = search(index = IndexName("index"), query = matchAll).searchAfter(Arr(Str("12345")))\nval request2WithSearchAfter: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).searchAfter(Arr(Str("12345")))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"size"}),", you can use the ",(0,n.jsx)(t.code,{children:"size"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'val request1WithSize: SearchRequest = search(index = IndexName("index"), query = matchAll).size(5)\nval request2WithSize: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).size(5)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"sort"}),", you can use the ",(0,n.jsx)(t.code,{children:"sort"})," method on both requests:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticSort.sortBy\nimport zio.elasticsearch.query.sort.SortOrder.Asc\nimport zio.elasticsearch.query.sort.Missing.First\n\nval request1WithSort: SearchRequest = search(index = IndexName("index"), query = matchAll).sort(sortBy(Document.intField).order(Asc))\nval request2WithSort: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).sort(sortBy("intField").missing(First))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can find more information about ",(0,n.jsx)(t.code,{children:"Search"})," and ",(0,n.jsx)(t.code,{children:"SearchAndAggregate"})," requests ",(0,n.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-search.html",children:"here"}),"."]})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(d,e)})):d(e)}},3905:(e,t,r)=>{r.d(t,{ah:()=>o});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),o=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),g=o(r),u=a,x=g["".concat(l,".").concat(u)]||g[u]||d[u]||s;return r?n.createElement(x,i(i({ref:t},h),{},{components:r})):n.createElement(x,i({ref:t},h))}));h.displayName="MDXCreateElement"}}]);