"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3909],{5143:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>g,metadata:()=>o,toc:()=>c});var n=t(5893),a=t(3905);const g={id:"elastic_aggregation_terms",title:"Terms Aggregation"},i=void 0,o={unversionedId:"overview/aggregations/elastic_aggregation_terms",id:"overview/aggregations/elastic_aggregation_terms",title:"Terms Aggregation",description:"This aggregation is a multi-bucket value source based aggregation where buckets are dynamically built - one per unique value.",source:"@site/../modules/docs/target/mdoc/overview/aggregations/elastic_aggregation_terms.md",sourceDirName:"overview/aggregations",slug:"/overview/aggregations/elastic_aggregation_terms",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_terms",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/aggregations/elastic_aggregation_terms.md",tags:[],version:"current",frontMatter:{id:"elastic_aggregation_terms",title:"Terms Aggregation"},sidebar:"docs",previous:{title:"Max Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_max"},next:{title:"Overview",permalink:"/zio-elasticsearch/overview/elastic_request"}},s={},c=[];function l(e){const r=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,a.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"This aggregation is a multi-bucket value source based aggregation where buckets are dynamically built - one per unique value."}),"\n",(0,n.jsxs)(r.p,{children:["In order to use the ",(0,n.jsx)(r.code,{children:"Terms"})," aggregation import the following:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:"import zio.elasticsearch.aggregation.TermsAggregation\nimport zio.elasticsearch.ElasticAggregation.termsAggregation\n"})}),"\n",(0,n.jsxs)(r.p,{children:["You can create a ",(0,n.jsx)(r.code,{children:"Terms"})," aggregation using the ",(0,n.jsx)(r.code,{children:"termsAggregation"})," method this way:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val aggregation: TermsAggregation = termsAggregation(name = "termsAggregation", field = "stringField.keyword")\n'})}),"\n",(0,n.jsxs)(r.p,{children:["You can create a ",(0,n.jsx)(r.a,{href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema",children:"type-safe"})," ",(0,n.jsx)(r.code,{children:"Terms"})," aggregation using the ",(0,n.jsx)(r.code,{children:"termsAggregation"})," method this way:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'// Document.stringField must be string value, because of Terms aggregation\nval aggregation: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField.keyword)\n'})}),"\n",(0,n.jsxs)(r.p,{children:["If you want to change the ",(0,n.jsx)(r.code,{children:"order"}),", you can use ",(0,n.jsx)(r.code,{children:"orderBy"}),", ",(0,n.jsx)(r.code,{children:"orderByCountAsc"}),", ",(0,n.jsx)(r.code,{children:"orderByCountDesc"}),", ",(0,n.jsx)(r.code,{children:"orderByKeyAsc"})," or ",(0,n.jsx)(r.code,{children:"orderByKeyDesc"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'import zio.elasticsearch.aggregation.AggregationOrder\nimport zio.elasticsearch.query.sort.SortOrder.Asc\n\nval aggregationWithOrder1: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderBy(AggregationOrder("otherAggregation", Asc))\nval aggregationWithOrder2: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByCountAsc\nval aggregationWithOrder3: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByCountDesc\nval aggregationWithOrder4: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByKeyAsc\nval aggregationWithOrder5: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByKeyDesc\n'})}),"\n",(0,n.jsxs)(r.p,{children:["If you want to change the ",(0,n.jsx)(r.code,{children:"size"}),", you can use ",(0,n.jsx)(r.code,{children:"size"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val aggregationWithSize: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).size(5)\n'})}),"\n",(0,n.jsxs)(r.p,{children:["If you want to add aggregation (on the same level), you can use ",(0,n.jsx)(r.code,{children:"withAgg"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val multipleAggregations: MultipleAggregations = termsAggregation(name = "termsAggregation", field = Document.stringField).withAgg(maxAggregation(name = "maxAggregation", field = Document.intField))\n'})}),"\n",(0,n.jsxs)(r.p,{children:["If you want to add another sub-aggregation, you can use ",(0,n.jsx)(r.code,{children:"withSubAgg"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val aggregationWithSubAgg: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).withSubAgg(maxAggregation(name = "maxAggregation", field = Document.intField))\n'})}),"\n",(0,n.jsxs)(r.p,{children:["You can find more information about ",(0,n.jsx)(r.code,{children:"Terms"})," aggregation ",(0,n.jsx)(r.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation",children:"here"}),"."]})]})}const d=function(e={}){const{wrapper:r}=Object.assign({},(0,a.ah)(),e.components);return r?(0,n.jsx)(r,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},3905:(e,r,t)=>{t.d(r,{ah:()=>c});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function g(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?g(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):g(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},g=Object.keys(e);for(n=0;n<g.length;n++)t=g[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(e);for(n=0;n<g.length;n++)t=g[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,g=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,h=m["".concat(s,".").concat(u)]||m[u]||l[u]||g;return t?n.createElement(h,i(i({ref:r},d),{},{components:t})):n.createElement(h,i({ref:r},d))}));d.displayName="MDXCreateElement"}}]);