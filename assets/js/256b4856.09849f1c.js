"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6244],{7185:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var c=s(5893),n=s(1151);const a={id:"elastic_request",title:"Overview"},r=void 0,i={id:"overview/elastic_request",title:"Overview",description:"We can represent an Elasticsearch request as a generic data type ElasticRequest[A], where A represents the result of the executed request.",source:"@site/../modules/docs/target/mdoc/overview/elastic_request.md",sourceDirName:"overview",slug:"/overview/elastic_request",permalink:"/zio-elasticsearch/overview/elastic_request",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/elastic_request.md",tags:[],version:"current",frontMatter:{id:"elastic_request",title:"Overview"},sidebar:"docs",previous:{title:"Sum Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_sum"},next:{title:"Aggregation Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_aggregate"}},o={},l=[];function d(e){const t=Object.assign({p:"p",code:"code",pre:"pre"},(0,n.a)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.p,{children:["We can represent an Elasticsearch request as a generic data type ",(0,c.jsx)(t.code,{children:"ElasticRequest[A]"}),", where ",(0,c.jsx)(t.code,{children:"A"})," represents the result of the executed request.\nThe library offers a DSL for creating these requests, by specifying their required parameters."]}),"\n",(0,c.jsx)(t.p,{children:"For example, we can create a request for deleting a document with a specified index as follows:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'ElasticRequest.deleteById(IndexName("index"), DocumentId("documentId"))\n'})}),"\n",(0,c.jsxs)(t.p,{children:["As you can see above, index names and document IDs are represented with ",(0,c.jsx)(t.code,{children:"IndexName"})," and ",(0,c.jsx)(t.code,{children:"DocumentId"})," respectively,\nusing Newtypes from ZIO Prelude, to increase type-safety with no runtime overhead."]}),"\n",(0,c.jsxs)(t.p,{children:["Elastic requests for creating and deleting return ",(0,c.jsx)(t.code,{children:"CreationOutcome"})," and ",(0,c.jsx)(t.code,{children:"DeletionOutcome"})," respectively, notifying us of the outcome of the request."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticRequest._\n\nval createIndexWithoutMappingResult: RIO[Elasticsearch, CreationOutcome] =\n  Elasticsearch.execute(createIndex(IndexName("index")))\n        \nval createIndexWithMappingResult: RIO[Elasticsearch, CreationOutcome] =\n  Elasticsearch.execute(createIndex(IndexName("index"), "..."))\n      \nval deleteIndexResult: RIO[Elasticsearch, DeletionOutcome] =\n  Elasticsearch.execute(deleteIndex(IndexName("index")))\n'})}),"\n",(0,c.jsx)(t.p,{children:"All the DSL methods for request creation can be brought into scope with the following import:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"import zio.elasticsearch.ElasticRequest._\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Executing the ",(0,c.jsx)(t.code,{children:"getById"})," request returns the following effect, where ",(0,c.jsx)(t.code,{children:"GetResult"})," represents a successful value:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticRequest._\nimport zio.elasticsearch.result.{DecodingException, GetResult}\n\nval getByIdResult: RIO[Elasticsearch, GetResult] =\n  Elasticsearch.execute(getById(IndexName("index"), DocumentId("documentId")))\n'})}),"\n",(0,c.jsxs)(t.p,{children:["To return a document of custom type ",(0,c.jsx)(t.code,{children:"A"}),", you must create a schema for ",(0,c.jsx)(t.code,{children:"A"}),". Here is an example of creating a schema for a custom type ",(0,c.jsx)(t.code,{children:"User"}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"import zio.schema.{DeriveSchema, Schema}\n\nfinal case class User(id: String, name: String, email: String, age: Int)\n\nobject User {\n  implicit val schema: Schema[User] = DeriveSchema.gen[User]\n}\n"})}),"\n",(0,c.jsxs)(t.p,{children:["As long as we have the implicit schema value in scope, we can transform ",(0,c.jsx)(t.code,{children:"GetResult"})," to a desired type ",(0,c.jsx)(t.code,{children:"A"}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val getUserByIdResult: RIO[Elasticsearch, IO[DecodingException, Option[User]]] =\n  Elasticsearch.execute(getById(IndexName("index"), DocumentId("documentId")))\n    .map(_.documentAs[User])\n'})})]})}const u=function(e={}){const{wrapper:t}=Object.assign({},(0,n.a)(),e.components);return t?(0,c.jsx)(t,Object.assign({},e,{children:(0,c.jsx)(d,e)})):d(e)}},1151:(e,t,s)=>{s.d(t,{a:()=>r});var c=s(7294);const n={},a=c.createContext(n);function r(e){const t=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);