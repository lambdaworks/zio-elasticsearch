"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2172],{5059:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>o,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var n=t(5893),r=t(1151);const s={id:"elastic_request_search",title:"Search Request"},i=void 0,c={id:"overview/requests/elastic_request_search",title:"Search Request",description:"The Search request allows you to execute a search query (and aggregation) and get back search hits that match the query.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_search.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_search",permalink:"/zio-elasticsearch/overview/requests/elastic_request_search",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_search.md",tags:[],version:"current",frontMatter:{id:"elastic_request_search",title:"Search Request"},sidebar:"docs",previous:{title:"Refresh Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_refresh"},next:{title:"Update Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update"}},l={},h=[];function d(e){const a=Object.assign({p:"p",code:"code",ol:"ol",li:"li",pre:"pre",a:"a"},(0,r.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"Search"})," request allows you to execute a search query (and aggregation) and get back search hits that match the query."]}),"\n",(0,n.jsx)(a.p,{children:"There are two ways of executing a search query:"}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsxs)(a.li,{children:["By using ",(0,n.jsx)(a.code,{children:"Search"})," request"]}),"\n",(0,n.jsxs)(a.li,{children:["By using ",(0,n.jsx)(a.code,{children:"SearchAndAggregate"})," request"]}),"\n"]}),"\n",(0,n.jsxs)(a.p,{children:["To create a ",(0,n.jsx)(a.code,{children:"Search"})," request do the following:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticRequest.SearchRequest\nimport zio.elasticsearch.ElasticRequest.search\n// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\n\nval request: SearchRequest = search(index = IndexName("index"), query = matchAll)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["To create a ",(0,n.jsx)(a.code,{children:"SearchAndAggregate"})," request do the following:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticRequest.SearchAndAggregateRequest\nimport zio.elasticsearch.ElasticRequest.search\nimport zio.elasticsearch._\nimport zio.elasticsearch.ElasticQuery._\nimport zio.elasticsearch.ElasticAggregation._\n\nval request: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField"))\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to add aggregation to ",(0,n.jsx)(a.code,{children:"SearchRequest"}),", you can use the ",(0,n.jsx)(a.code,{children:"aggregate"})," method on it:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticAggregation._\n\nval requestWithAggregation: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll).aggregate(aggregation = maxAggregation(name = "aggregation", field = "intField"))\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"excludes"}),", you can use the ",(0,n.jsx)(a.code,{children:"excludes"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val request1WithExcludes: SearchRequest = search(index = IndexName("index"), query = matchAll).excludes("longField")\nval request2WithExcludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).excludes("longField", "intField")\n// type-safe fields:\nval request1TsWithExcludes: SearchRequest = search(index = IndexName("index"), query = matchAll).excludes(Document.longField)\nval request2TsWithExcludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).excludes(Document.longField, Document.intField)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"from"}),", you can use the ",(0,n.jsx)(a.code,{children:"from"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val request1WithFrom: SearchRequest = search(index = IndexName("index"), query = matchAll).from(2)\nval request2WithFrom: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).from(2)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"highlight"}),", you can use the ",(0,n.jsx)(a.code,{children:"highlights"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticHighlight.highlight\n\nval request1WithHighlights: SearchRequest = search(index = IndexName("index"), query = matchAll).highlights("intField")\nval request2WithHighlights: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).highlights(Document.intField)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"includes"}),", you can use the ",(0,n.jsx)(a.code,{children:"includes"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val request1WithIncludes: SearchRequest = search(index = IndexName("index"), query = matchAll).includes("longField")\nval request2WithIncludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes("longField", "intField")\n// type-safe fields:\nval request1TsWithIncludes: SearchRequest = search(index = IndexName("index"), query = matchAll).includes(Document.longField)\nval request2TsWithIncludes: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes(Document.longField, Document.intField)\n// with schema\nval request1WithIncludesSchema: SearchRequest = search(index = IndexName("index"), query = matchAll).includes[Document]\nval request2WithIncludesSchema: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).includes[Document]\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"routing"}),", you can use the ",(0,n.jsx)(a.code,{children:"routing"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval request1WithRouting: SearchRequest = search(index = IndexName("index"), query = matchAll).routing(Routing("routing"))\nval request2WithRouting: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).routing(Routing("routing"))\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"search_after"}),", you can use the ",(0,n.jsx)(a.code,{children:"searchAfter"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'import zio.json.ast.Json.{Arr, Str}\n\nval request1WithSearchAfter: SearchRequest = search(index = IndexName("index"), query = matchAll).searchAfter(Arr(Str("12345")))\nval request2WithSearchAfter: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).searchAfter(Arr(Str("12345")))\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"size"}),", you can use the ",(0,n.jsx)(a.code,{children:"size"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val request1WithSize: SearchRequest = search(index = IndexName("index"), query = matchAll).size(5)\nval request2WithSize: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).size(5)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If you want to change the ",(0,n.jsx)(a.code,{children:"sort"}),", you can use the ",(0,n.jsx)(a.code,{children:"sort"})," method on both requests:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'import zio.elasticsearch.ElasticSort.sortBy\nimport zio.elasticsearch.query.sort.SortOrder.Asc\nimport zio.elasticsearch.query.sort.Missing.First\n\nval request1WithSort: SearchRequest = search(index = IndexName("index"), query = matchAll).sort(sortBy(Document.intField).order(Asc))\nval request2WithSort: SearchAndAggregateRequest = search(index = IndexName("index"), query = matchAll, aggregation = maxAggregation(name = "aggregation", field = "intField")).sort(sortBy("intField").missing(First))\n'})}),"\n",(0,n.jsxs)(a.p,{children:["You can find more information about ",(0,n.jsx)(a.code,{children:"Search"})," and ",(0,n.jsx)(a.code,{children:"SearchAndAggregate"})," requests ",(0,n.jsx)(a.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-search.html",children:"here"}),"."]})]})}const o=function(e={}){const{wrapper:a}=Object.assign({},(0,r.ah)(),e.components);return a?(0,n.jsx)(a,Object.assign({},e,{children:(0,n.jsx)(d,e)})):d(e)}},1151:(e,a,t)=>{t.d(a,{Zo:()=>c,ah:()=>s});var n=t(7294);const r=n.createContext({});function s(e){const a=n.useContext(r);return n.useMemo((()=>"function"==typeof e?e(a):{...a,...e}),[a,e])}const i={};function c({components:e,children:a,disableParentContext:t}){let c;return c=t?"function"==typeof e?e({}):e||i:s(e),n.createElement(r.Provider,{value:c},a)}}}]);