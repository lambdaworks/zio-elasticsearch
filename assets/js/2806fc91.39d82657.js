"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3909],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},g=Object.keys(e);for(a=0;a<g.length;a++)r=g[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(e);for(a=0;a<g.length;a++)r=g[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,g=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(r),p=n,d=m["".concat(s,".").concat(p)]||m[p]||u[p]||g;return r?a.createElement(d,i(i({ref:t},c),{},{components:r})):a.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var g=r.length,i=new Array(g);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var l=2;l<g;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},3383:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>g,metadata:()=>o,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const g={id:"elastic_aggregation_terms",title:"Terms Aggregation"},i=void 0,o={unversionedId:"overview/aggregations/elastic_aggregation_terms",id:"overview/aggregations/elastic_aggregation_terms",title:"Terms Aggregation",description:"This aggregation is a multi-bucket value source based aggregation where buckets are dynamically built - one per unique value.",source:"@site/../modules/docs/target/mdoc/overview/aggregations/elastic_aggregation_terms.md",sourceDirName:"overview/aggregations",slug:"/overview/aggregations/elastic_aggregation_terms",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_terms",draft:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/aggregations/elastic_aggregation_terms.md",tags:[],version:"current",frontMatter:{id:"elastic_aggregation_terms",title:"Terms Aggregation"},sidebar:"docs",previous:{title:"Max Aggregation",permalink:"/zio-elasticsearch/overview/aggregations/elastic_aggregation_max"},next:{title:"Overview",permalink:"/zio-elasticsearch/overview/elastic_request"}},s={},l=[],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This aggregation is a multi-bucket value source based aggregation where buckets are dynamically built - one per unique value."),(0,n.kt)("p",null,"In order to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"Terms")," aggregation import the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.elasticsearch.aggregation.TermsAggregation\nimport zio.elasticsearch.ElasticAggregation.termsAggregation\n")),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Terms")," aggregation using the ",(0,n.kt)("inlineCode",{parentName:"p"},"termsAggregation")," method this way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val aggregation: TermsAggregation = termsAggregation(name = "termsAggregation", field = "stringField.keyword")\n')),(0,n.kt)("p",null,"You can create a ",(0,n.kt)("a",{parentName:"p",href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema"},"type-safe")," ",(0,n.kt)("inlineCode",{parentName:"p"},"Terms")," aggregation using the ",(0,n.kt)("inlineCode",{parentName:"p"},"termsAggregation")," method this way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// Document.stringField must be string value, because of Terms aggregation\nval aggregation: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField.keyword)\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"order"),", you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"orderBy"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"orderByCountAsc"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"orderByCountDesc"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"orderByKeyAsc")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"orderByKeyDesc")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.elasticsearch.aggregation.AggregationOrder\nimport zio.elasticsearch.query.sort.SortOrder.Asc\n\nval aggregationWithOrder1: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderBy(AggregationOrder("otherAggregation", Asc))\nval aggregationWithOrder2: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByCountAsc\nval aggregationWithOrder3: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByCountDesc\nval aggregationWithOrder4: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByKeyAsc\nval aggregationWithOrder5: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).orderByKeyDesc\n')),(0,n.kt)("p",null,"If you want to change the ",(0,n.kt)("inlineCode",{parentName:"p"},"size"),", you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"size")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val aggregationWithSize: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).size(5)\n')),(0,n.kt)("p",null,"If you want to add aggregation (on the same level), you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"withAgg")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val multipleAggregations: MultipleAggregations = termsAggregation(name = "termsAggregation", field = Document.stringField).withAgg(maxAggregation(name = "maxAggregation", field = Document.intField))\n')),(0,n.kt)("p",null,"If you want to add another sub-aggregation, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"withSubAgg")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val aggregationWithSubAgg: TermsAggregation = termsAggregation(name = "termsAggregation", field = Document.stringField).withSubAgg(maxAggregation(name = "maxAggregation", field = Document.intField))\n')),(0,n.kt)("p",null,"You can find more information about ",(0,n.kt)("inlineCode",{parentName:"p"},"Terms")," aggregation ",(0,n.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation"},"here"),"."))}u.isMDXComponent=!0}}]);