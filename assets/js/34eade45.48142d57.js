"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2287],{2891:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var n=s(5893),a=s(1151);const r={id:"overview_bulkable",title:"Bulkable"},i=void 0,c={id:"overview/overview_bulkable",title:"Bulkable",description:"If you want to use Elasticsearch's Bulk API you can do so using the bulk method.",source:"@site/../modules/docs/target/mdoc/overview/bulkable.md",sourceDirName:"overview",slug:"/overview/overview_bulkable",permalink:"/zio-elasticsearch/overview/overview_bulkable",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/bulkable.md",tags:[],version:"current",frontMatter:{id:"overview_bulkable",title:"Bulkable"},sidebar:"docs",previous:{title:"Fluent API",permalink:"/zio-elasticsearch/overview/overview_fluent_api"},next:{title:"Streaming",permalink:"/zio-elasticsearch/overview/overview_streaming"}},o={},l=[];function u(e){const t=Object.assign({p:"p",code:"code",pre:"pre"},(0,a.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["If you want to use Elasticsearch's Bulk API you can do so using the ",(0,n.jsx)(t.code,{children:"bulk"})," method.\nThe ",(0,n.jsx)(t.code,{children:"bulk"})," method accepts a sequence of bulkable requests which are ",(0,n.jsx)(t.code,{children:"ElasticRequest"})," that inherit the ",(0,n.jsx)(t.code,{children:"Bulkable"})," trait.\nBulk API for Elasticsearch supports only index, create, delete, and update actions and for that reason,\nyou can use only ",(0,n.jsx)(t.code,{children:"Create"}),", ",(0,n.jsx)(t.code,{children:"CreateOrUpdate"}),", ",(0,n.jsx)(t.code,{children:"CreateWithId"}),", and ",(0,n.jsx)(t.code,{children:"DeleteById"})," in your bulkable requests."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'final case class User(id: Int, name: String)\n\nobject User {\n  implicit val schema: Schema.CaseClass2[Int, String, User] =\n    DeriveSchema.gen[User]\n\n  val (id, name) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nval request: BulkRequest = ElasticRequest.bulk(\n  ElasticRequest.create[User](indexName, User(1, "John Doe")),\n  ElasticRequest.create[User](indexName, DocumentId("documentId2"), User(2, "Jane Doe")),\n  ElasticRequest.upsert[User](indexName, DocumentId("documentId3"), User(3, "Richard Roe")),\n  ElasticRequest.deleteById(indexName, DocumentId("documentId2"))\n)\n\nElasticsearch.execute(request)\n'})})]})}const d=function(e={}){const{wrapper:t}=Object.assign({},(0,a.a)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(u,e)})):u(e)}},1151:(e,t,s)=>{s.d(t,{a:()=>i});var n=s(7294);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);