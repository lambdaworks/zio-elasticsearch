"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7035],{415:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"overview/queries/elastic_query_regexp","title":"Regexp Query","description":"The Regexp query returns documents that contain terms matching a regular expression.","source":"@site/../modules/docs/target/mdoc/overview/queries/elastic_query_regexp.md","sourceDirName":"overview/queries","slug":"/overview/queries/elastic_query_regexp","permalink":"/zio-elasticsearch/overview/queries/elastic_query_regexp","draft":false,"unlisted":false,"editUrl":"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/queries/elastic_query_regexp.md","tags":[],"version":"current","frontMatter":{"id":"elastic_query_regexp","title":"Regexp Query"},"sidebar":"docs","previous":{"title":"Range Query","permalink":"/zio-elasticsearch/overview/queries/elastic_query_range"},"next":{"title":"Term Query","permalink":"/zio-elasticsearch/overview/queries/elastic_query_term"}}');var n=s(4848),i=s(8453);const a={id:"elastic_query_regexp",title:"Regexp Query"},c=void 0,o={},l=[];function u(e){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"Regexp"})," query returns documents that contain terms matching a regular expression."]}),"\n",(0,n.jsxs)(r.p,{children:["In order to use the ",(0,n.jsx)(r.code,{children:"Regexp"})," query import the following:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:"import zio.elasticsearch.query.RegexpQuery\nimport zio.elasticsearch.ElasticQuery._\n"})}),"\n",(0,n.jsxs)(r.p,{children:["You can create a ",(0,n.jsx)(r.code,{children:"Regexp"})," query using the ",(0,n.jsx)(r.code,{children:"regexp"})," method this way:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val query: RegexpQuery = regexp(field = "name", value = "t.*st")\n'})}),"\n",(0,n.jsxs)(r.p,{children:["You can create a ",(0,n.jsx)(r.a,{href:"https://lambdaworks.github.io/zio-elasticsearch/overview/overview_zio_prelude_schema",children:"type-safe"})," ",(0,n.jsx)(r.code,{children:"Regexp"})," query using the ",(0,n.jsx)(r.code,{children:"regexp"})," method this way:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val query: RegexpQuery = regexp(field = Document.name, value = "t.*st")\n'})}),"\n",(0,n.jsxs)(r.p,{children:["If you want to change the ",(0,n.jsx)(r.code,{children:"case_insensitive"}),", you can use ",(0,n.jsx)(r.code,{children:"caseInsensitive"}),", ",(0,n.jsx)(r.code,{children:"caseInsensitiveFalse"})," or ",(0,n.jsx)(r.code,{children:"caseInsensitiveTrue"})," method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val queryWithCaseInsensitive: RegexpQuery = regexp(field = Document.name, value = "t.*st").caseInsensitive(true)\nval queryWithCaseInsensitiveFalse: RegexpQuery = regexp(field = Document.name, value = "t.*st").caseInsensitiveFalse\nval queryWithCaseInsensitiveTrue: RegexpQuery = regexp(field = Document.name, value = "t.*st").caseInsensitiveTrue\n'})}),"\n",(0,n.jsxs)(r.p,{children:["You can find more information about ",(0,n.jsx)(r.code,{children:"Regexp"})," query ",(0,n.jsx)(r.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-regexp-query.html",children:"here"}),"."]})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>c});var t=s(6540);const n={},i=t.createContext(n);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);