"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38],{5897:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var n=r(5893),s=r(3905);const i={id:"elastic_request_bulk",title:"Bulk Request"},c=void 0,o={unversionedId:"overview/requests/elastic_request_bulk",id:"overview/requests/elastic_request_bulk",title:"Bulk Request",description:"The Bulk request performs multiple indexing or delete operations in a single API call. This reduces overhead and can greatly increase indexing speed.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_bulk.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_bulk",permalink:"/zio-elasticsearch/overview/requests/elastic_request_bulk",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_bulk.md",tags:[],version:"current",frontMatter:{id:"elastic_request_bulk",title:"Bulk Request"},sidebar:"docs",previous:{title:"Aggregation Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_aggregate"},next:{title:"Count Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_count"}},u={},a=[];function l(e){const t=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,s.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Bulk"})," request performs multiple indexing or delete operations in a single API call. This reduces overhead and can greatly increase indexing speed."]}),"\n",(0,n.jsxs)(t.p,{children:["In order to use the ",(0,n.jsx)(t.code,{children:"Bulk"})," request import the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"import zio.elasticsearch.ElasticRequest.BulkRequest\nimport zio.elasticsearch.ElasticRequest.bulk\n"})}),"\n",(0,n.jsxs)(t.p,{children:["You can create a ",(0,n.jsx)(t.code,{children:"Bulk"})," request using the ",(0,n.jsx)(t.code,{children:"bulk"})," method this way:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `IndexName` and `DocumentId`\nimport zio.elasticsearch._\n\nval index = Index("index")\n\nval document1 = new Document(id = DocumentId("111"), intField = 1, stringField = "stringField1")\nval document2 = new Document(id = DocumentId("222"), intField = 2, stringField = "stringField2")\n\nval request: BulkRequest = bulk(create(index = index, doc = document1), upsert(index = index, id = DocumentId("111"), doc = document2))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"refresh"}),", you can use ",(0,n.jsx)(t.code,{children:"refresh"}),", ",(0,n.jsx)(t.code,{children:"refreshFalse"})," or ",(0,n.jsx)(t.code,{children:"refreshTrue"})," method:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'val requestWithRefresh: BulkRequest = bulk(create(index = index, doc = document1), upsert(index = index, id = DocumentId("111"), doc = document2)).refresh(true)\nval requestWithRefreshFalse: BulkRequest = bulk(create(index = index, doc = document1), upsert(index = index, id = DocumentId("111"), doc = document2)).refreshFalse\nval requestWithRefreshTrue: BulkRequest = bulk(create(index = index, doc = document1), upsert(index = index, id = DocumentId("111"), doc = document2)).refreshTrue\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to change the ",(0,n.jsx)(t.code,{children:"routing"}),", you can use the ",(0,n.jsx)(t.code,{children:"routing"})," method:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval requestWithRouting: BulkRequest = bulk(create(index = index, doc = document1), upsert(index = index, id = DocumentId("111"), doc = document2)).routing(Routing("routing"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can find more information about ",(0,n.jsx)(t.code,{children:"Bulk"})," request ",(0,n.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-bulk.html",children:"here"}),"."]})]})}const d=function(e={}){const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},3905:(e,t,r)=>{r.d(t,{ah:()=>a});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var u=n.createContext({}),a=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,i=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=a(r),p=s,m=h["".concat(u,".").concat(p)]||h[p]||l[p]||i;return r?n.createElement(m,c(c({ref:t},d),{},{components:r})):n.createElement(m,c({ref:t},d))}));d.displayName="MDXCreateElement"}}]);