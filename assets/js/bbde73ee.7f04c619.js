"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8617],{5049:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var s=r(5893),n=r(3905);const a={id:"elastic_request_update_by_query",title:"Update By Query Request"},i=void 0,c={unversionedId:"overview/requests/elastic_request_update_by_query",id:"overview/requests/elastic_request_update_by_query",title:"Update By Query Request",description:"The UpdateByQuery request updates documents that match the specified query. If no query is specified, performs an update on every document in the specified Elasticsearch index.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_update_by_query.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_update_by_query",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update_by_query",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_update_by_query.md",tags:[],version:"current",frontMatter:{id:"elastic_request_update_by_query",title:"Update By Query Request"},sidebar:"docs",previous:{title:"Update Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update"},next:{title:"Use of ZIO Prelude and Schema",permalink:"/zio-elasticsearch/overview/overview_zio_prelude_schema"}},o={},u=[];function d(e){const t=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,n.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request updates documents that match the specified query. If no query is specified, performs an update on every document in the specified Elasticsearch index."]}),"\n",(0,s.jsxs)(t.p,{children:["In order to use the ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request import the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import zio.elasticsearch.ElasticRequest.UpdateByQueryRequest\nimport zio.elasticsearch.ElasticRequest._\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can create a ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request using the ",(0,s.jsx)(t.code,{children:"updateAllByQuery"})," method in the following manner:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.script.Script\n\nval request: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can create a ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request using the ",(0,s.jsx)(t.code,{children:"updateByQuery"})," method in the following manner:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch._\nimport zio.elasticsearch.script.Script\nimport zio.elasticsearch.ElasticQuery._\n\nval request: UpdateByQueryRequest = updateByQuery(index = IndexName("index"), query = contains(field = Document.name, value = "test"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"conflicts"}),", you can use the ",(0,s.jsx)(t.code,{children:"conflicts"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.request.UpdateConflicts.Proceed\n\nval requestWithConflicts: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).conflicts(Proceed)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"refresh"}),", you can use ",(0,s.jsx)(t.code,{children:"refresh"}),", ",(0,s.jsx)(t.code,{children:"refreshFalse"})," or ",(0,s.jsx)(t.code,{children:"refreshTrue"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val requestWithRefresh: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refresh(true)\nval requestWithRefreshFalse: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refreshFalse\nval requestWithRefreshTrue: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refreshTrue\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"routing"}),", you can use the ",(0,s.jsx)(t.code,{children:"routing"})," method on any of previously mentioned methods:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval requestWithRouting: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).routing(Routing("routing"))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can find more information about ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request ",(0,s.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update-by-query.html",children:"here"}),"."]})]})}const l=function(e={}){const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}},3905:(e,t,r)=>{r.d(t,{ah:()=>u});var s=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=s.createContext({}),u=function(e){var t=s.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},l=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(r),h=n,y=p["".concat(o,".").concat(h)]||p[h]||d[h]||a;return r?s.createElement(y,i(i({ref:t},l),{},{components:r})):s.createElement(y,i({ref:t},l))}));l.displayName="MDXCreateElement"}}]);