"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9132],{3189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(4848),r=n(8453);const a={id:"overview_bulkable",title:"Bulkable"},c=void 0,o={id:"overview/overview_bulkable",title:"Bulkable",description:"If you want to use Elasticsearch's Bulk API you can do so using the bulk method.",source:"@site/../modules/docs/target/mdoc/overview/bulkable.md",sourceDirName:"overview",slug:"/overview/overview_bulkable",permalink:"/zio-elasticsearch/overview/overview_bulkable",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/bulkable.md",tags:[],version:"current",frontMatter:{id:"overview_bulkable",title:"Bulkable"},sidebar:"docs",previous:{title:"Fluent API",permalink:"/zio-elasticsearch/overview/overview_fluent_api"},next:{title:"Streaming",permalink:"/zio-elasticsearch/overview/overview_streaming"}},i={},l=[];function u(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["If you want to use Elasticsearch's Bulk API you can do so using the ",(0,s.jsx)(t.code,{children:"bulk"})," method.\nThe ",(0,s.jsx)(t.code,{children:"bulk"})," method accepts a sequence of bulkable requests which are ",(0,s.jsx)(t.code,{children:"ElasticRequest"})," that inherit the ",(0,s.jsx)(t.code,{children:"Bulkable"})," trait.\nBulk API for Elasticsearch supports only index, create, delete, and update actions and for that reason,\nyou can use only ",(0,s.jsx)(t.code,{children:"Create"}),", ",(0,s.jsx)(t.code,{children:"CreateOrUpdate"}),", ",(0,s.jsx)(t.code,{children:"CreateWithId"}),", and ",(0,s.jsx)(t.code,{children:"DeleteById"})," in your bulkable requests."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'final case class User(id: Int, name: String)\n\nobject User {\n  implicit val schema: Schema.CaseClass2[Int, String, User] =\n    DeriveSchema.gen[User]\n\n  val (id, name) = schema.makeAccessors(FieldAccessorBuilder)\n}\n\nval request: BulkRequest = ElasticRequest.bulk(\n  ElasticRequest.create[User](indexName, User(1, "John Doe")),\n  ElasticRequest.create[User](indexName, DocumentId("documentId2"), User(2, "Jane Doe")),\n  ElasticRequest.upsert[User](indexName, DocumentId("documentId3"), User(3, "Richard Roe")),\n  ElasticRequest.deleteById(indexName, DocumentId("documentId2"))\n)\n\nElasticsearch.execute(request)\n'})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function c(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);