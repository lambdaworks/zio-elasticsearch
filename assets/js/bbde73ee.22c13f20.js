"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8617],{5049:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>d});var s=r(5893),a=r(1151);const i={id:"elastic_request_update_by_query",title:"Update By Query Request"},c=void 0,n={id:"overview/requests/elastic_request_update_by_query",title:"Update By Query Request",description:"The UpdateByQuery request updates documents that match the specified query. If no query is specified, performs an update on every document in the specified Elasticsearch index.",source:"@site/../modules/docs/target/mdoc/overview/requests/elastic_request_update_by_query.md",sourceDirName:"overview/requests",slug:"/overview/requests/elastic_request_update_by_query",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update_by_query",draft:!1,unlisted:!1,editUrl:"https://github.com/lambdaworks/zio-elasticsearch/edit/main/docs/overview/requests/elastic_request_update_by_query.md",tags:[],version:"current",frontMatter:{id:"elastic_request_update_by_query",title:"Update By Query Request"},sidebar:"docs",previous:{title:"Update Request",permalink:"/zio-elasticsearch/overview/requests/elastic_request_update"},next:{title:"Use of ZIO Prelude and Schema",permalink:"/zio-elasticsearch/overview/overview_zio_prelude_schema"}},o={},d=[];function u(e){const t=Object.assign({p:"p",code:"code",pre:"pre",a:"a"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request updates documents that match the specified query. If no query is specified, performs an update on every document in the specified Elasticsearch index."]}),"\n",(0,s.jsxs)(t.p,{children:["In order to use the ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request import the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import zio.elasticsearch.ElasticRequest.UpdateByQueryRequest\nimport zio.elasticsearch.ElasticRequest._\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can create a ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request using the ",(0,s.jsx)(t.code,{children:"updateAllByQuery"})," method in the following manner:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `IndexName`\nimport zio.elasticsearch._\nimport zio.elasticsearch.script.Script\n\nval request: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can create a ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request using the ",(0,s.jsx)(t.code,{children:"updateByQuery"})," method in the following manner:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch._\nimport zio.elasticsearch.script.Script\nimport zio.elasticsearch.ElasticQuery._\n\nval request: UpdateByQueryRequest = updateByQuery(index = IndexName("index"), query = contains(field = Document.name, value = "test"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"conflicts"}),", you can use the ",(0,s.jsx)(t.code,{children:"conflicts"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.elasticsearch.request.UpdateConflicts.Proceed\n\nval requestWithConflicts: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).conflicts(Proceed)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"refresh"}),", you can use ",(0,s.jsx)(t.code,{children:"refresh"}),", ",(0,s.jsx)(t.code,{children:"refreshFalse"})," or ",(0,s.jsx)(t.code,{children:"refreshTrue"})," method:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val requestWithRefresh: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refresh(true)\nval requestWithRefreshFalse: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refreshFalse\nval requestWithRefreshTrue: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).refreshTrue\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to change the ",(0,s.jsx)(t.code,{children:"routing"}),", you can use the ",(0,s.jsx)(t.code,{children:"routing"})," method on any of previously mentioned methods:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'// this import is required for using `Routing` also\nimport zio.elasticsearch._\n\nval requestWithRouting: UpdateByQueryRequest = updateAllByQuery(index = IndexName("index"), script = Script("ctx._source.intField += params[\'factor\']").params("factor" -> 2)).routing(Routing("routing"))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can find more information about ",(0,s.jsx)(t.code,{children:"UpdateByQuery"})," request ",(0,s.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update-by-query.html",children:"here"}),"."]})]})}const l=function(e={}){const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(u,e)})):u(e)}},1151:(e,t,r)=>{r.d(t,{Zo:()=>n,ah:()=>i});var s=r(7294);const a=s.createContext({});function i(e){const t=s.useContext(a);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const c={};function n({components:e,children:t,disableParentContext:r}){let n;return n=r?"function"==typeof e?e({}):e||c:i(e),s.createElement(a.Provider,{value:n},t)}}}]);